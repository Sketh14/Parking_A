CAR PARKING
-------------------------------------------------------
- Cars can go backward/forward on the direction they are facing
- Car hits peds | Game Over
- If more than 1 car is on the road, and another car tries to get on the road
    [=] If there is space between the cars, then the car will get on the road between them
    [=] If there is no space, then the car will wait for both of them to pass, and then get on the road
    [=] If 2 cars are side by side, waiting to get on the road, then the car to the right will go first.
        {+} In case, both are trying to get on the road from downwards.
    [=] For 2 cars side-by-side, the car that comes first, going with clockwise direction, will go first
    [=] Show some emoji, when a car hits another car
    [=] Obstacles around the parking area, to blobk the car from moving
    [=] Cars follow point to point while on the road, no need for fancy animation of turning.
        {+} In case of getting on the road also, no turning animation, just quick turn to align with the road
    [=] Need to check for space before the oncoming car, if a car wants to get on the road
    [=] The car rotates from the pivot, no matter where it is hit to shake
        {+} If side, then to and fro
        {+} If frront/back, then that direction
    [=] Keep in mind, how a car turns, if going backwards, then turn to the direction of the road, not 360
    [=] Moved only counts when the vehicle has moved, even if the player has slid the vehicle, if it just
        collides with another vehicle, then it does not count
	[=] A vehicle is divided into smaller 2 parts width wise, maybe same for the length


--------------------------------------------------------------------------------------------------------------
                                                    15 May 2025
--------------------------------------------------------------------------------------------------------------
- Creating basic scene

- VehicleController
    [=] Single script to control all the vehicles | Lighten the burden of running multiple scripts
- InputManager
    [=] For managing all the inputs for the gameplay
    [=] Testing Unit Selection
        {+} Keeping track if user has let go or is still interacting [Click/Touch]
        {+} Slide Direction logic
- GameManager
    [=] Singleton to manage Gameplay
    [=] Adding action for selecting Unirs


- Vehicle Prefab
    [=] Basic vehicle prefab for now

--------------------------------------------------------------------------------------------------------------
                                                    16 May 2025
--------------------------------------------------------------------------------------------------------------
- InputManager
    [=] Debug Slide Direction
    [=] Making threshold values
    [=] Applying rotation to slideDir to coutner Camera's rotation
- VehicleController
    [=] Validating slideDir with Vehicle Orientation
        {+} Using Mathf.RoundToInt to set the threshold for slideDir for now
            <~> Too much chance to go in wrong direction
        {+} Setting threshold to slideDireation of 0.75f

- Scene
    [=] Adding Road Prefab
        {+} Adding Triggger to it for now
- VehicleController
    [=] Added status to keep track of Vehicle Status
    [=] Changing status accordingingly
    [=] Checking if the vehicle has reached the road or not

-Scene
    [=] Placing markers for road-turnings
- VehicleController | Ferry Logic
    [=] enum for VehicleStatus | RoadMarkers
    [=] Keeping points in a readonly array and updating through it
    [=] Markers for updating and keeping track of road-turnings
    [=] [BUG] Fixing Vehicle interaction setting when clicked once even for wrong slide direction

--------------------------------------------------------------------------------------------------------------
                                                    17 May 2025
--------------------------------------------------------------------------------------------------------------
- PoolManager
    [=] Singleton PoolManager for managing objects
    [=] Dictionary with ObjectPool for pooling vehicles for now
- VehicleSpawner
    [=] Non-Monobehvaiour class for spawning vehicles
    [=] Readonly array to contain border co-ordinates
- InputManager
    [=] Adding Layermask to raycasting | Fixing bug

- Scene
    [=] Making a rectangle parking lot to fit the window
        {+} New Dimension : 6X11
- VehicleController
    [=] Making adjustments according to the rectangle park
- VehicleSpawner
    [=] Making adjustments according to the rectangle park

- VehicleSpawner
    [=] Collision Detection

- VehicleSpawner
    [=] Setting a delay(10 ms) to collision detection checking so that the Physics System is updated
- GameManager
    [=] Adding action to show Vehicles have been spawned fully
- VehicleController
    [=] Adding callback for VehiclesSpawned

-Scene
    [=] Adding 2 more different vehicles
- VehicleSpawner
    [=] Different Vehicle Dimensions
    [=] Checking for collisions by taking different vehicle dimensions and rotations
    [=] Using Vehicle_Type to determine which random vehicle to spawn

--------------------------------------------------------------------------------------------------------------
                                                    18 May 2025
--------------------------------------------------------------------------------------------------------------
- Scene
    [=] Making snap settings to 0.05 on Y
    [=] Changing road prefab positions
    [=] Changing Vehicle size
        {+} Reducing by just a little on all sides so as to not collide with others and also fit in the grid-system
- VehicleSpawner
    [=] Changing road co-ordinates accordingly
    [=] Making grid-fill system
        {+} Making grid | Choosing random vehicle | Validating chosen cell

--------------------------------------------------------------------------------------------------------------
                                                    26 May 2025
--------------------------------------------------------------------------------------------------------------
- VehicleSpawner
    [=] Adding const for grid dimensions
    [=] Checking horizontal | vertical collisions separately

- VehicleSpawner
    [=] Assinging a random orientation and checking according to it
    [=] Check current cell and then cell in the chosen direction
    [=] After check is done, placing the vehicle in that section only
    [=] Leaving 1 cell gap from border for any wall placement
    [=] Setting position and rotation of the vehicles also
- PoolManager
    [=] Adding BLANK to PoolType

--------------------------------------------------------------------------------------------------------------
                                                    28 May 2025
--------------------------------------------------------------------------------------------------------------
- VehicleSpawner
    [=] Fixing spawn poistion code for small vehicles
    [=] Logic for vertical spawn of small vehicles 
    [=] Bounds Check/Cells Filled logic update

--------------------------------------------------------------------------------------------------------------
                                                    29 May 2025
--------------------------------------------------------------------------------------------------------------
- VehicleSpawner
    [=] Fixing bounds check logic

--------------------------------------------------------------------------------------------------------------
                                                    30 May 2025
--------------------------------------------------------------------------------------------------------------
- VehicleSpawner
    [=] Fixing bounds check logic again

- VehicleSpawner
    [=] Vehicle_3 spawn position logic

- VehicleSpawner
    [=] Adding y-position
- Project
    [=] Changing vehicle prefabs

- VehicleController
    [=] Moving OnVehicleSpawned code to a dedicated function and passing as callback to VehicleSpawner
- GameManager
    [=] Removing OnVehicleSpawned

- Project
    [=] Fixing Vehicle prefabs | Moving collider to parents
- Scripts
    [=] VehicleController
        {+} Correct vehicle direction when entering a road
        {+} Turning logic for road

- Scripts
    [=] VehicleController
        {+} Checking collisions with raycasts
            <~> Different ray positions for different vehicle types
            <~> Up detection
        {+} Adding VehicleType to VehicleInfo
    [=] VehicleSpawner
        {+} Sending vehicleTypes list back to VehicleController

- Scripts
    [=] VehicleController
        {+} Collision Detection | Changing to early block
        {+} Down/Left/Right detection
        {+} Setting rayDir according to the interacted direction
        {+} Using interacted direction to shift start-pos of raycast

--------------------------------------------------------------------------------------------------------------
                                                    31 May 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleController
        {+} Adding constant for grid-cell size
        {+} Rounding z-position of collided vehicle down to the nearest multiple of 0.25
        {+} Adding Func for calling appropriate function while rounding position at collision
        {+} Adding readonly array to store Vehicle Sizes for rounding position
        {+} Not using the rounding method, as not reliable if the frame drops

- Scripts
    [=] VehicleController
        {+} Increasing rayStart position offset to 0.1
        {+} Setting other components of final position using vehicleSpawner array
        {+} Changing Func signature to Vec3 from float to change the entire Vec3 position

- Project
    [=] Adding Environment layer
- Scripts
    [=] VehicleController
        {+} Adding Environment to Collision-Check layer mask
        {+} Adding layer-mask to Raycast check

- Scripts
    [=] VehicleSpawner
        {+} Combining spawn case blocks for into one switch controlled by vehicleOrientation

- Scripts
    [=] VehicleSpawner
        {+} Boundary Check when spawn checking

--------------------------------------------------------------------------------------------------------------
                                                    01 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] EnvironmentSpawner
        {+} Boundary spawning logic
            <~> Horizontal spawning | Offset according to gridMapIndex for lower objects
        {+} 2 passes for horizontal/vertical spawning separately
            <~> Only checking in the specific direction for that pass
    [=] VehicleSpawner
        {+} Moving grid dimensions from UniversalConstant
    [=] PoolManager
        {+} Adding Boundary to PoolType enum
- Project
    [=] Making a prefab for Boundary

- Scripts
    [=] EnvironmentSpawner
        {+} Only keeping 1 direction for both pairs, as it would not make sense
        {+} Leaving the last cell inn horizontal to avoid going over

- Scripts
    [=] EnvironmentSpawner
        {+} Evaluate 1 side first and then move to the other side
        {+} Fill Left-Side first

--------------------------------------------------------------------------------------------------------------
                                                    02 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] EnvironmentSpawner
        {+} Increasing chances to spawn spaces in boundaries (3:1)
        {+} Adding gaps to vertical placement for avoiding top/down boundaries
        {+} Making/Fixing logic for spawn position

- Scripts
    [=] EnvironmentSpawner
        {+} Fixing Horizontal spawn
            <~> Leaving last top cell
        {+} Fixing Vertical spawn
            <~> Leaving last bottom cells
        {+} Adding string to generate random seed
    [=] VehicleSpawner
        {+} Adding string to generate random seed

- Scripts
    [=] VehicleController
        {+} Sending boundary data to VehicleSpawner
    [=] VehicleSpawner
        {+} Filling up grid data with boundary data
        {+} Top/Bottom done
        {+} Left/Right alternating done
        
- Scripts
    [=] VehicleSpawner
        {+} Left/Right Boundary data fill
        {+} Toggling value to the right hand side

--------------------------------------------------------------------------------------------------------------
                                                    03 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleSpawner
        {+} Vehicle Boundary check | Check if vehicle can exit the parking lot
        {+} Check if vehicle has exit on either sides
        {+} Fixing Horizontal Boundary check | Offsetting properly
        {+} Finishing Horizontal | Vertical exits check
        {+} Changing naming for vehicles

- Scripts
    [=] VehicleSpawner | EnvironmentSpawner
        {+} Using string from GameManager as random seed
    [=] GameManager
        {+} Adding random seed string

- Scene
    [=] Main Menu
        {+} Basic Main Menu 
- Project
    [=] Adding Circle_256 png
- Scripts
    [=] Main Menu Controller
        {+} Basic controller for Main-Menu
    [=] UniversalConstant
        {+} Added enums for Scenes | Game Status
    [=] GameManager
        {+} Adding gamestatus
    [=] VehicleController
        {+} Toggling Game-status accordingly

- Script
    [=] GameConfigScriptableObject
        {+} SO for setting Game Configurations
    [=] MainMenuController
        {+} Toggle logic for randomisation
    [=] VehicleController
        {+} Adding logic for randomizing levels
- Project
    [=] Adding a Game Config SO
- Scene
    [=] Main Menu
        {+} Adding a toggle to randomize levels
    [=] Adding reference to Game-
    
--------------------------------------------------------------------------------------------------------------
                                                    04 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] InputManager
        {+} Fixing Slide controls | First click/touch pos

- Project
    [=] Bounary Prefab
        {+} Fixing collider size

- Scripts
    [=] VehicleController
        {+} Changing vehicle names according to their status
        {+} Changing VehicleStatus enum values to bit check values
        {+} Checking vehicle status of collided-vehicle to determine what to do
        {+} Adding COLLIDED_ONBOARDING to VehicleStatus
        {+} Logic to wait for passing vehicle
        {+} Fixing vehicle naming according to status

--------------------------------------------------------------------------------------------------------------
                                                    05 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleController
        {+} Doing 3 raycasts for detecting passing vehicle
        {+} All in same direction for both alignments in same plane with offset
        {+} Increasing raycast size for all
        {+} Setting respective bits for raycasts for individual vehicles with +1 offset

- Scripts
    [=] VehicleController
        {+} Increasing startPos of collision check raycast
        {+} Changing road boundary values
        {+} Adding ONBOARDING_ROAD to VehicleStatus
        {+} Checking for collision using WaitForVehicle if ONBOARDING_ROAD is set

--------------------------------------------------------------------------------------------------------------
                                                    06 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleController
        {+} Separate Renaming vehicle to a function and applying agresive inlining

- Scripts
    [=] VehicleController
        {+} Taking offset while ONBOARDING_ROAD for early collision check for passing vehicles
        {+} Increasing width of ONBOARDING_ROAD checks and increasing raycasts, decreasing spacing between them

- Scripts
    [=] VehicleController
        {+} Checking if total sum is equal to every raycast being set 

- Scripts
    [=] VehicleController
        {+} Fix Check Collisions raycast start position
            <~> Medium: H|V / Long: H|V

- Scripts
    [=] VehicleController
        {+} Same length raycast for all vehicles
        {+} Same raycast spacing for all vehicles 

- Scripts
    [=] VehicleController
        {+} Increasing raycast in one direction

- Scripts
    [=] VehicleController
        {+} Checking for parallel collisions on the road with oncoming vehicles at turns
        {+} Only checking once, and if true, setting flag for ONBOARDING_ROAD collision checks
        {+} Checking in the direction of oncoming vehicle
- Project
    [=] Adding Moving_Vehicle layer
    [=] Turning off collider for road-prefab

--------------------------------------------------------------------------------------------------------------
                                                    09 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleController
        {+} Fixing corner collision checks
        {+} Inreasing raycast length multiplier
        {+} Inreasing raycast according to vehicle-type
        {+} Decreasing ONBOARDING_ROAD collision check length
        {+} Flipping raycasts according to Interaction-Direction
        {+} Making persistent corner-collision checks

- Scripts
    [=] VehicleController
        {+} Adding CORNER_FREE to VehicleStatus
        {+} Increasing raycast for corner check
        {+} Persistent check if corner detected, else only once

- Scripts
    [=] VehicleController
        {+} Only checking collisions inside the parking | Keeping OnBoarding separate

--------------------------------------------------------------------------------------------------------------
                                                    10 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleController
        {+} Checking corner again if the vehicle collides with another before exiting the corner

- Scripts
    [=] NPCController
        {+} Template for Controller
    [=] NPCSpawner
        {+} Separate spawner for spawning NPCs
    [=] VehicleController
        {+} Adding EnvironmentSpawned callback
    [=] GameManager
        {+} Adding action for VehicleSpawned and EnvironmentSpawned

- Scripts
    [=] Fixing constants | naming

- Scripts
    [=] PoolManager
        {+} Adding NPC to PoolType
    [=] VehicleController
        {+} Separating VehicleSpawner with EnvironmentSpawned callback
- Project
    [=] NPC prefab placeholder
- MainGameplay Scene
    [=] Adding Npc prefab to PoolManager

- Scripts
    [=] EnvironmentSpawner
        {+} Local const for better readability somewhat
    [=] NPCSpawner
        {+} Arranging boundary in clockwise direction for finding connecting gaps
    [=] UniversalConstant
        {+} Adding half-cell size constant
    [=] VehicleController
        {+} Replacing half-cell size local ref with UniversalConstant ref

- Scripts
    [=] NPCSpawner
        {+} Spawn position logic according to boundary index
    [=] VehicleSpawner
        {+} Replacing values with references 
--------------------------------------------------------------------------------------------------------------
                                                    11 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] NPCSpawner
        {+} Fixing spawn position logic | Left/Down

- Scripts
    [=] NPCSpawner
        {+} Adding NpcStatus enum
        {+} Only spawning at 3 empty cells gap and resetting after hitting occupied one
        {+} Setting NpcStatus for every spawn direction/orientation?

- Scripts
    [=] Pool Scriptable-Object
        {+} Contains poolType and prefab
    [=] UniversalConstant
        {+} Shifting PoolType here
    [=] EnvironmentSpawner | VehicleSpawner
        {+} Updating PoolType references
    [=] PoolManager
        {+} Replacing prefabs with Pool_SO logic
- Scene
    [=] Creating asset for Vehicles/Boundary in SO

- Scripts
    [=] NPCSpawner
        {+} Adding H/V to name for identifying spawn pos
        {+} Setting orientation to spawning also
    [=] UniversalConstant
        {+} Adding back NPC enum
        {+} Adding NPC_SPAWNED enum to GameStatus
    [=] GameManager
        {+} Creating method to set the GameStatus for setting LEVEL_GENERATED
    [=] NPCController
        {+} NPCStatus enum for managing different states
        {+} Initializing info array with spawn orientation data
        {+} Movement logic
            <~> Basic movement
            <~> Turning around corners logic
- Project
    [=] Adding placeholder mats/ direction arrwos to NPC
    [=] Making NPC SO for pool

--------------------------------------------------------------------------------------------------------------
                                                    12 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] NPCSpawner
        {+} Fixing NPCStatus enum values
        {+} Fixing spawning NPC | Spawn only in each side-walks
    [=] NPCController
        {+} Collision Checks
            <~> Turning around if collided with Boundary object

- Scripts
    [=] VehicleSpawner
        {+} Using vehicleCount instead of gridMapIndex for tracking vehicles
            <~> 3 digit vehicleCount formatting
    [=] NPCSpawner
        {+} Adding npcCount to NPC name
    [=] NPCController
        {+} Adding NPC_Hit to NPCStatus | VehicleLayerMask | RotationMatrix array
        {+} Checking vehicle collisions and extracting ID
        {+} Collision Check | Rotating rayDir clockwise by 90
            <~> Top-Left Corner

- Scripts
    [=] NPCController
        {+} Updating collision-check raycast logic to make it suitable for all sides

- Scripts
    [=] NPCController
        {+} Fixing raycast position
        {+} Fixing vehicle_ID extraction
        {+} Go flying when NPC hit | Invoking NPCHit event
    [=] GameManager
        {+} Event for NPCHit 

- Scripts
    [=] VehicleController
        {+} Adding NPC_HIT to VehicleStatus
        {+} Callback for NPCHit
            <~> Disable respective functions for vehicle when hit

- Scripts
    [=] NPCController
        {+} Tumble logic when hit
- Scene
    [=] NPCprefab change
    
--------------------------------------------------------------------------------------------------------------
                                                    13 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] NPCSpawner
        {+} Recording all the empty cells gap first
        {+} Then determining which gap to select from the list

- Scripts
    [=] NPCSpawner
        {+} Spawning using emptyGapArr
    [=] NPCController
        {+} Only register rays after first for vehicle-collision checks
            <~> To avoid collision if vehicle just passes by in-front.
    [=] GameManager
        {+} Setting LEVEL_FAILED to GameStatus if NPC_HIT
    [=] UniversalConstant
        {+} Adding NPC_HIT to GameStatus

- Scripts
    [=] GameUIManager
        {+} Reset UI logic
    [=] GameManager
        {+} GameStatusChange event
        {+} Moving InitializeLevel here from VehicleController
    [=] UniversalConstant
        {+} RESET_LEVEL for GameStatus enum
    [=] NPCController
        {+} Callback for GameStatus change
            <~> Resetting NPC logic
        {+} Changing EnvironmentSpawned callback logic
        {+} Adding InitialPos | InitialRot | InitialStatus to npcInfo for storing initial spawn values 
    [=] VehicleController
        {+} Callback for GameStatus change
            <~> Resetting Vehicle logic
        {+} Adding InitialPos | InitialRot to vehicleInfo for storing initial spawn values 
- MainGameplay Scene
    [=] Basic reset level panel

- Script
    [=] GameConfigScriptableObject
        {+} Adding string for Random Seed
    [=] VehicleSpawner | EnvironmentSpawner
        {+} Replacing Random Seed ref with Game Config ref

- Script
    [=] NPCController
        {+} Fixing Corner spawn | NPC stuck rotating if boundary is at the corner
        {+} Unsetting TURNING_CORNER in the next execution rather than waiting for condition
        {+} Separating Vehicle | Boundary collision check
            <~> Front for vehicles+boundary | side only for vehicles

- Script
    [=] NPCController
        {+} Randomly switch to IDLE when hitting a boundary
        {+} Fixing IDLE | MOVING NPCStatus values
        
--------------------------------------------------------------------------------------------------------------
                                                    16 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] SaveSystem
        {+} Save/Load logic
    [=] PlayerStats
        {+} Simple class to store player stats

- Scripts
    [=] GameManager
        {+} PlayerStats field to store current stats
    [=] ShopController
        {+} Controller for shop
        {+} Internal struct to keep track of Vehicle type | Skin Mats | Skin Index
        {+} Initializing vehicles from Vehicle-SO
        {+} ShopUIController UI callbacks
        {+} Skin toggle logic | Vehicle selection logic
    [=] ShopUIController
        {+} Adding next | previous bt for switching vehicles
        {+} Vehicle Selection bts
- Scene
    [=] MainMenu_Shop
        {+} Separate temmporary scene for Shop template
        {+} Rotating platform to showcase vehicle
        {+} Bts to select vehicle | Toggle vehicle skins
    [=] Prefab
        {+} Vehicle_S | Adding a parent to the mesh
- Project
    [=] Test mats for testing vehicle skin switch

- Scripts
    [=] MainMenuManager
        {+} Singleton to handle MainMenu
        {+} Loading player stats
    [=] ShopController
        {+} Adding skin price to VehicleInfo
        {+} Buy/Equip Skin logic | Saving to PlayerStats
        {+} Callbacks for updating vehicle-skin prices and buy/equip text 
    [=] PlayerStats
        {+} Adding fields to store the vehicle stats | Skins Bought | Skin equipped
        {+} Default Constructor | Initializing skin flags to 1 as default skin is equipped for all
    [=] ShopUIController
        {+} Adding Equip/Buy bt
            <~> Only keeping 1 as the index is tracked by ShopController
        {+} Adding BUY_EQUIP_VEHICLE | VEHICLE_SKIN_BOUGHT | UPDATE_VEHICLE_INFO to InteractionStatus
        {+} Callbacks for updating UI | prices/texts
- Scene
    [=] MainMenu_Shop
        {+} Adding skin-price texts for each vehicle 

--------------------------------------------------------------------------------------------------------------
                                                    17 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] ShopController
        {+} Replacing Pool-SOs with VehicleInfo
        {+} Updating buy/equip text when changing vehicles

- Scripts
    [=] MainMenuManager
        {+} SaveSystem logic
    [=] ShopController
        {+} Fixing Buy/Equip Logic
    [=] ShopUIController
        {+} Fixing default buy/equip text
- MainMenu_Shop Scene update for earlier commit

- Scripts
    [=] GameManager
        {+} Save progress logic
        {+} Adding Action for UISelected event
        {+} Updating OnSelect to include SelectionStatus of InputManager
    [=] GameUIManager
        {+} Powers bt logic | Invoking Action for UISelected
    [=] InputManager
        {+} UISelected callback logic
            <~> Setting _selectionStatus accordingly with powers
        {+} SelectionStatus enum | Replacing _selectionStatus
    [=] VehicleController
        {+} Updating OnSelect callback logic
            <~> Powers logic
- Scene
    [=] MainGameplaySc_1
        {+} Adding power buttons

- Scripts
    [=] VehicleController
        {+} Reset logic for vehicles when powers are used
            <~> Changing vehicle to previous type if power is used to change the vehicle type
        {+} Adding VehicleType for containing changed VehicleType to VehicleInfo
        {+} Name change for spawned vehicle with power
        {+} Rename logic fix | Working with 4 digits now
        {+} Disallow small vehicle selection for Shrink power
    [=] VehicleSpawner
        {+} Name update
    [=] InputManager
        {+} Reset selection if small vehicle selected for shrink power

- Scripts
    [=] GameUIManager
        {+} Adding enums to UISelected
        {+} Adding PowerPanel buttons | Connecting callbacks to these
        {+} Toggle Panels logic
        {+} Adding disclaimer text | power prices | delay clear disclaimer
        {+} Price check for powers 
        {+} Disable Power-Panel opening if power selected | Enable after use
        {+} Only Saveprogress if power is used
    [=] GameManager
        {+} Adding Power-Prices
    [=] InputManager
        {+} Invoking callback for power-used
        {+} Saving player stats only when power is used
- Scene
    [=] MainGameplaySc_1
        {+} Adding Power Panel UI
        
--------------------------------------------------------------------------------------------------------------
                                                    18 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] InputManager
        {+} FIx POWER_USED flag set logic

- Scripts
    [=] PoolManager
        {+} Adding flag to check Pool-status
        {+} Separating Pool Initialization
    [=] GameManager
        {+} Calling for Pool Initialization 
        {+} Adding VehicleInfo SOs
    [=] VehicleInfoScriptableObject
        {+} Separate SO for vehicles
        {+} To use for both shop and gameplay
    [=] ShopController
        {+} Adding VehicleInfoSO here
    [=] PlayerStats
        {+} Changing EquippedVehicleSkinIndexes to byte and not using as flags
- Project
    [=] Restructure Data Folder
    [=] Add VehicleInfo-SO's

--------------------------------------------------------------------------------------------------------------
                                                    19 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Script
    [=] PoolManager
        {+} Completing skins assigning

- Scripts
    [=] NPCController
        {+} Fixing NPC getting thrown in the wrong direction if the vehicle's orientation is flipped and forward is opposite
        {+} Checking vehicle forward+position to determine hit-direction

- Scene
    [=] Level Win UI
-  Scripts
    [=] GameUIManager
        {+} Level result logic
            <~> Passed or Failed level
    [=] UniversalConstant
        {+} Adding LEVEL_PASSED to GameStatus

- Scripts
    [=] UniversalConstant
        {+} Adding enums for Next-Level generation
    [=] VehicleController
        {+} Next level generation
            <~> Despawning vehicles
    [=] GameManager
        {+} Replacing OnHit action with OnGameStatusChange | Adding int to value passed
        {+} Despawning Environment
    [=] EnvironmentSpawner
        {+} Using a list to store boundaryObjects | For despawning also

--------------------------------------------------------------------------------------------------------------
                                                    20 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] GameManager / VehicleController
        {+} Resetting flags
    [=] NPCController
        {+} Resetting flags
        {+} NExt level logic
    [=] UniversalConstant
        {+} Fixing enum values for GameStatus

- Scripts
    [=] GameManager
        {+} Setting flags
    [=] VehicleController
        {+} Keeping vehicle count and invoking LEVEL_PASSED
    [=] VehicleSpawner / EnvironmentSpawner / NPCController
        {+} CancellationTokenSource checks
- Scripts | FIXES
    [=] GameUIManager
        {+} Not Invoking NEXT_LEVEL_REQUESTED directly
            <~> Not doing this, causes every update to run during the reset call casuing error
    [=] VehicleController
        {+} Checking VehicleType for despawn instead of just using VehicleType
        {+} Changing vehicleInfo to List for new-level
    [=] NPCController
        {+} Setting to IDLE/NPC_HIT for reset
        {+} Changing npcInfo to List for new-level

- Scripts
    [=] Spawning things one after another, instead of all at once with async
    [=] NPCController
        {+} Waiting for vehicles to spawn before calling NPCSpawner
    [=] PoolManager
        {+} Not activating vehicles | Replicating results
    [=] NPCController / VehicleController
        {+} Activating gameObjects after LEVEL_GENERATED is set
    [=] InputManager
        {+} Refactoring

- Scripts
    [=] Commenting some debug statements 
    [=] NPCController
        {+} Fixing NPC Not turning correctly | Removing reset flag
        {+} Broke during Next-Level-Generation logic update

- Scripts
    [=] Fixing Vehicle not stopping when NPC_HIT
    [=] NPCController
        {+} Send NPC_HIT instead of LEVEL_FAILED
    [=] GameManager
        {+} Invoke LEVEL_FAILED here from NPC_HIT
    [=] VehicleController
        {+} ONBOARDING_ROAD check if Vehicle is about to get to the middle of the road
        {+} Increasing raycount for ONBOARDING_ROAD collision detection

--------------------------------------------------------------------------------------------------------------
                                                    21 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleSpawner
        {+} Splitting SpawnVehicles() into seprate internal functions

- Scripts
    [=] VehicleSpawner
        {+} Adding Vehicle-Indexes to gridMap along with Vehicle_Type
            <~> Needed during spawning to check if a cluster of cells belong to same vehicle
        {+} Adjacent Vehicles check for HOrizontal

--------------------------------------------------------------------------------------------------------------
                                                    22 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleSpawner
        {+} Adjacent Vehicles check for Vertical
        {+} Fixing Horizontal Adjacent Check
        {+} Adding a indexOffset parameter to simplify code

--------------------------------------------------------------------------------------------------------------
                                                    23 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Scripts
    [=] VehicleSpawner
        {+} Fixing VehicleSpawner Adjacent Check | Adding Bounds Check

- Scripts
    [=] VehicleSpawner
        {+} Integrating Vehicle Adjacent Check to VehicleSpawns

--------------------------------------------------------------------------------------------------------------
                                                    24 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Project
    [=] Adding Ads Package
- Scripts
    [=] UnityAdsManager
        {+} Control Ads through here
        {+} Adding AdType / AdStatus to keep track of Ads
        {+} Keeping Ids in ADIDS array
        {+} Ads initialization / loading / showing logic

- Scripts
    [=] UnityAdsManager
        {+} Making _currentAdStatus public
        {+} Fixing/Adding values enums
        {+} Resetting flags logic
        {+} Invoking AdStatusChange event logic
    [=] GameUIManager
        {+} Adding callbacks from UnityAdsManager and for watchBt
    [=] GameManager
        {+} Adding callback to AdsStatusChange
            <~> Increasing Gold for Ads completed and saving
    [=] UniversalConstant
        {+} Renaming constants
        {+} Adding COIN_RECEIVED const for coins given to player after watching an Ad
- Scene
    [=] Adding AdsManager to scene

- Script
    [=] ToastUtility
        {+} Utility file for displaying toast messages
- Scene
    [=] Making a simple Toast-Prefab

- Script
    [=] ToastUtility
        {+} Simultaneous calls handling

--------------------------------------------------------------------------------------------------------------
                                                    25 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Project
    [=] Adding Stickman model
- Scene
    [=] Making Stickman prefab | Extracting mat from model

- Scene
    [=] Adding/Fixing animations

- Scripts
    [=] NPCController
        {+} Adding Animator array to store references
        {+} Random float array to keep track of random values
        {+} Playing animations directly instead of waiting for transition
- Scene
    [=] Changing NPC Prefab model to Stickman
    [=] Stickman_AC
        {+} Removing transitions and playing directly
    [=] Stickman Prefab
        {+} Adding a mesh parent to rotate the mesh. Skeleton is controlled by AC

--------------------------------------------------------------------------------------------------------------
                                                    26 JUNE 2025
--------------------------------------------------------------------------------------------------------------
- Project
    [=] Updating NPC prefab, Stickman model and animations
        {+} Adding new materials
- Script
    [=] Updating npc position

- Script
    [=] NPCController
        {+} Disable animator for NPC when hit
- Project
    [=] Changing shoe mat

--------------------------------------------------------------------------------------------------------------
- [DO] Someway combine adjacent and boundary check
    [=] This will help improve the spawn count of vehicles
    [=] Right now, the vehicles which are adjacent are lost even with a valid boundary
- [DO] [IMP] [DONE] Add Bounds Check to Adjacent Vehicles Check
- [DO] Reduce MoveVehicle() in VehicleController
    [=] Move the common parts together
- [FIX] [FIXED] When ONBOARDING_ROAD, Vehicle can get stuck
    [=] Raycast detects oncoming vehicle and current vehicle gets stuck in the middle of ONBOARDING_ROAD,
        despite having enough space to Onboard
- [FIX] [FIXED!] Vehicle Placment Validation | Random Seed - "20173054"
    [=] Opposing vehicles can block each other by 1 block
        <~> Ex: Vehicle[2]I[019]O[1]_0000 | Vehicle[2]I[021]O[0]_0000 | Vehicle[3]I[020]O[1]_0000 block each other by 1 block horizontally
        <~> [FIXED SOMEWHAT] Position validation is done, but spawning is way less now
- [FIX] [FIXED] Next Level Generation
    [=] [FIXED] Vehicle_L not instantiated properly
    [=] [FIXED] vehicleInfo is less than VehiclesSpawned
    [=] [ALT] Random in Flasher gets different result if vehicle is enabled at Instantiation
        <~> Enabling after LEVEL_GENERATED
- [FIX] [FIXED] NPC not following route now | Random Seed - "1316642"
- [FIX] [FIXED For NOW] ONBOARDING_ROAD check fail | Car boards the road and stops | bottom-right | Random Seed - "1316642"
- [FIX] [IMP] Boundary Validation is wrong
- [DO] Maybe follow the routine of setting flag for resetting level
    [=] Request Made, Values Changed, Continue With Gameplay
- [FIX] [FIXED] Show correct mat for vehicle for skin equipped
- [DONE] Assign skins to vehicles in main gameplay when equipped
- [CHANGE] Change Boundary Prefab Colliders
    [=] (1, 0.5, 0.45) - Collider | (1.58,1.58,1.35) - Scale of Mesh
- [DONE] Shrink Power should not work for Small Vehicles
- [DONE] Update RESET logic according to powers
- [FIX] [IMP] [FIXED] NPC still take hit from parked vehicles when the vehicle has hit the dumpster and at the sides
- [DO] Allow player to rotate the vehicle in shop | Rotate by itself when Idle
- [DONE FOR NOW] [IMP] Link Vehicle info to player stats
    [=] Keep track of the skin of vehicles
- [DONE] Tumble NPC when hit and goes flying
- [FIXED] [IMP] NPCSpawner | Take corners continously
- [DONE] Make scriptable for vehicles
- [DONE] In-game currency
    [=] [DONE] Powers to utilize in-game currency
    [=] [DONE] Shrink vehicle to different size vehicle
        <~> Replacing Vehicle with a small vehicle
    [=] [DONE] Remove vehicle
- [DO] [DONE FOR NOW] Shop for skins
    [=] Made rotating platform
    [=] Buy/Equip mechanics
    [=] Sacing progress to PlayerStats
- [DO] WHeel maybe if possible 
- [DO] [MAYBE IMP] Asss weightage to boundary spawner
    [=] Consistent empty gaps or at least feel like consistent
- [FIX [DONE]] Increase corner raycasts
    [=] When a vehicle is just behind, then the raycast will not detect a vehicle
- [FIXED] [IMP] If the corner raycasts flag is set and the vehicle has passed the ONBOARDING_ROAD collision check also,
    then, if the 2nd vehicle is coming, it will collide with the current vehicle, as the current vehicle will not further
    check for corner collisions
    [=] Maybe persistent check for corner-collisions
- [FIXED] [IMP] On letting a vehicle to pass from the front, if the second vehicle is not that far behind then the current
    vehile wil collide with the 2nd vehicle and get stuck
    [=] Increasing raycast to down?
    [=] Bottom-Left needs to have raycast flipped
- [FIXED] [IMP] [DONE] On Corner checks, not all raycasts work
    [=] Fixed, checking hitCount after the loop
- [DO] [IMP] [DONE] When ONBOARDING_ROAD, it would be possible to keep the raycast at the corner of the roads, as we only need
    to check for the oncoming vehicles, the raycasts for collision checks do not need to move with the vehicle
        {+} This will also somewhat fix the vehicle still moving, even when there is another oncoming vehicle at turn
- [DO] [FIX] [DONE] ONBOARDING_ROAD collisions check
    [=] If the vehicle is at the corners ans another is approaching from the road, the current vehicle will not be 
        able to detect it with raycast
        {+} Might need to sphere check for edge cases
        {+} Can also keep indexes of moving vehicles and check if any vehicle is besides the current one
- [DO] [FIX] [DONE] When ONBOARDING_ROAD, the vehicle moves even when getting a tiny gap
    [=] There is a delay between onboaridng the road and getting no collisions
        {+} Within the delay, another passing vehicle can come and collide with the current vehicle
        {+} But it is too late, and the vehicle is already onboarding the road
- [Do] [IMP] [DONE] Might need another heck while pulling onto the road, to check whether there are any cars just about to pass
    [=] Sometimes the collision check does not work for vehicles just about to cross but 
        the vehicle has crossed the On-Road threshold
    [=] Take some offset from the road boundaries and if crossed then use WaitForVehicle collision check to check 
        for passing vehicles
    [=] Use different layermask and enable the check as soon as it touches the last cell
- [Do] [IMP] [DONE] Fill the vehicle grid with bounary values and check collisions while placement
- [DO] [IMP] [DONE] Boundary Checks
- [DO] [IMP] [DONE] Collision Checks
    [=] When vehicle is moving
        {+} Check if collided wth another vehicle  [DONE FOR NOW]
        {+} Check if there is another vehicle on the road, before entering the road
    [=] What happens when the vehicle collides?
        {+} Reset the collision check
        {+} Do something to the collider and the one colliding
            <~> Shake the colliding vehicle
    [=] 2 conditions can give to collisions
        {+} When a vehicle is moving towards another vehicle  [DONE FOR NOW]
        {+} When a vehicle is moving into the road and another vehicle is in front
- Need to check in lower cells also, as the vehicles are 2 cells wide
- [DO] [DONE FOR NOW] Divide into smaller sections
    [=] Move every 0.05 intervals
    [=] For Small Vehicle | Center will always be multiple of 0.5
    [=] For Medium Vehicle | Center will always in interval of 0.5 starting from the (-0.75 | 0.75)
    [=] For Large Vehicle | Center will always in interval of 0.5 starting from the (-1 | 1)
    [=] Since every Vehicle has the same width and only the length differs
        {+} Need to only change the length value, breadth value can remain the same
- [DO] [DONE] Vehicle Collision Detection
    [=] Make sectors and add vehicles, for less load [DONE FOR NOW]
    [=] [IMP] Detect collisions while getting on road
- [DO] [DONE FOR NOW] Pooling System 
- [DO] [DONE FOR NOW] Vehicle Placement around the parking lot
    [=] Can make a random placement logic, just checking if the car algined has a way to get out in any direction
- [Do] Vehicle shake
    [=] After collision, shake the vehicle
- [Do]  [DONE FOR NOW] Vehicle Collision Detection
    [=] Raycast front and back from sides?
        {+} Poking a little on the front and back to detect other vehicles
- [DO] [DONE FOR NOW]Vehicles can lerp to rotate towards the next marker, so that the rotation fo vehicle does not goes wrong
    [=] Simply rotating the vehicle

- To check if the vehicles have reached the road or not?
    [=] Can use trigger | Would have to attach rigidbody to vehicles | would be unnecessary
    [=] Can just use co-ordinates, as the scene is not changing

- Limit Values
    [=] Taking Absolute values as the direction would not matter
        {+} The vehicle can go forward/backward
    [=] Threshold : 0.75 for both


INVERSE CHECK
22[4] ,23[4] ,24[0] ,25[0] ,26[0] ,27[4] ,28[4] ,29[0] ,30[0] ,31[0] ,32[0] ,33[4] ,34[4] ,35[0] ,36[0] ,37[0] ,38[0] ,39[0] ,40[0] ,41[0] ,42[0] ,43[0] ,
44[0] ,45[0] ,46[0] ,47[0] ,48[4] ,49[4] ,50[0] ,51[0] ,52[4] ,53[4] ,54[4] ,55[4] ,56[4] ,57[4] ,58[0] ,59[0] ,60[4] ,61[4] ,62[0] ,63[0] ,64[0] ,65[0] ,66[0] ,67[0] ,68[4] ,69[4] ,70[0] ,71[0] ,72[0] ,73[4] ,74[4] ,75[0] ,76[0] ,77[0] ,78[4] ,79[4] ,80[0] ,81[0] ,82[0] ,83[0] 

22[0] ,23[0] ,24[0] ,25[0] ,26[4] ,27[4] ,28[0] ,29[0] ,30[4] ,31[4] ,32[4] ,33[4] ,34[4] ,35[4] ,36[0] ,37[0] ,38[4] ,39[4] ,40[0] ,41[0] ,42[0] ,43[0] ,44[0] ,45[0] ,46[4] ,47[4] ,48[0] ,49[0] ,50[0] ,51[4] ,52[4] ,53[0] ,54[0] ,55[0] ,56[4] ,57[4] ,58[0] ,59[0] ,60[0] ,61[0] ,
62[4] ,63[4] ,64[0] ,65[0] ,66[0] ,67[4] ,68[4] ,69[0] ,70[0] ,71[0] ,72[0] ,73[4] ,74[4] ,75[0] ,76[0] ,77[0] ,78[0] ,79[0] ,80[0] ,81[0] ,82[0] ,83[0] ,


REVERSE CHECK
44[0] ,45[0] ,46[0] ,47[0] ,48[4] ,49[4] ,50[4] ,51[4] ,52[4] ,53[4] ,54[4] ,55[4] ,56[0] ,57[0] ,58[0] ,59[4] ,60[4] ,61[0] ,
62[0] ,63[0] ,64[0] ,65[4] ,66[4] ,67[4] ,68[4] ,69[4] ,70[4] ,71[0] ,72[0] ,73[4] ,74[4] ,75[0] ,76[0] ,77[0] ,78[0] ,79[0] ,
80[0] ,81[0] ,82[0] ,83[0] ,

44[0] ,45[0] ,46[0] ,47[0] ,48[0] ,49[0] ,50[0] ,51[0] ,52[0] ,53[4] ,54[4] ,55[0] ,56[0] ,57[4] ,58[4] ,59[4] ,60[4] ,61[4] ,
62[4] ,63[0] ,64[0] ,65[0] ,66[0] ,67[4] ,68[4] ,69[0] ,70[0] ,71[0] ,72[4] ,73[4] ,74[4] ,75[4] ,76[4] ,77[4] ,78[4] ,79[4] ,
80[0] ,81[0] ,82[0] ,83[0] ,

SPAWN_CHECK
1316619 | 1316642 | 1316717 | 1316735 | 13161116 | 13161124 | 13161142 | 13161148 | 13161154 | 1316121
Problem: 1316642

Vehicle Type Orienattion Debug

1 : 
[24]Ty[2]Or[3], [25]Ty[1]Or[2], [27]Ty[3]Or[3], [30]Ty[1]Or[2], [31]Ty[1]Or[1], [35]Ty[2]Or[2], [36]Ty[1]Or[1], [39]Ty[1]Or[3], 
[41]Ty[2]Or[0], [42]Ty[1]Or[1], [45]Ty[1]Or[1], [48]Ty[3]Or[1], [51]Ty[1]Or[3], [57]Ty[3]Or[0], [61]Ty[3]Or[0], [62]Ty[1]Or[2], 
[63]Ty[1]Or[0], [70]Ty[2]Or[0], [76]Ty[2]Or[1], [80]Ty[2]Or[1], [81]Ty[3]Or[2], [82]Ty[2]Or[1], [86]Ty[1]Or[3], [89]Ty[2]Or[2], 
[90]Ty[2]Or[0], [91]Ty[3]Or[1], [92]Ty[3]Or[2], [97]Ty[3]Or[3], [102]Ty[3]Or[2], [103]Ty[1]Or[2], [104]Ty[2]Or[2], [105]Ty[3]Or[3], 
[106]Ty[1]Or[0], [107]Ty[1]Or[1], [108]Ty[3]Or[2], [111]Ty[3]Or[2], [112]Ty[2]Or[1], [113]Ty[1]Or[0], [114]Ty[3]Or[2], [117]Ty[2]Or[1], 
[119]Ty[3]Or[2], [120]Ty[1]Or[0], [121]Ty[3]Or[0], [122]Ty[2]Or[2], [123]Ty[3]Or[3], [125]Ty[2]Or[3], [127]Ty[2]Or[1], [128]Ty[3]Or[2], 
[129]Ty[2]Or[2], [134]Ty[1]Or[3], [135]Ty[2]Or[0], [137]Ty[3]Or[3], [141]Ty[3]Or[3], [143]Ty[3]Or[2], [149]Ty[2]Or[1], [150]Ty[3]Or[0], 
[156]Ty[1]Or[0], [157]Ty[2]Or[1], [158]Ty[2]Or[3], [161]Ty[2]Or[2], [165]Ty[3]Or[1], [166]Ty[1]Or[0], [171]Ty[1]Or[1], [174]Ty[3]Or[3], 
[177]Ty[3]Or[3], [179]Ty[3]Or[3], [180]Ty[3]Or[2], [183]Ty[2]Or[1], [184]Ty[1]Or[2], [196]Ty[1]Or[1], [199]Ty[3]Or[0], [201]Ty[1]Or[0], 
[205]Ty[1]Or[1], [206]Ty[2]Or[3], [209]Ty[2]Or[0], [210]Ty[1]Or[0], [213]Ty[1]Or[2], [214]Ty[2]Or[3], [218]Ty[3]Or[2], [221]Ty[3]Or[2], 
[228]Ty[1]Or[1], [231]Ty[2]Or[1], [233]Ty[2]Or[0], [234]Ty[3]Or[0], [238]Ty[2]Or[0], [240]Ty[1]Or[2], [243]Ty[1]Or[1], [246]Ty[3]Or[2], 
[249]Ty[1]Or[2], [251]Ty[2]Or[0], [253]Ty[3]Or[3], [254]Ty[2]Or[3], [255]Ty[3]Or[3], [257]Ty[3]Or[2], [261]Ty[3]Or[3], [268]Ty[3]Or[1], 
[273]Ty[1]Or[3], [275]Ty[1]Or[0], [276]Ty[1]Or[2], [279]Ty[3]Or[0], [282]Ty[3]Or[2], [283]Ty[3]Or[3], [284]Ty[3]Or[0], [287]Ty[1]Or[3], 
[298]Ty[3]Or[2], [302]Ty[2]Or[0], [303]Ty[3]Or[1], [306]Ty[2]Or[2], [309]Ty[1]Or[2], [312]Ty[3]Or[0], [313]Ty[3]Or[1], [314]Ty[3]Or[1], 
[315]Ty[2]Or[3], [320]Ty[3]Or[0], [324]Ty[2]Or[0], [332]Ty[2]Or[3], [333]Ty[2]Or[0], [334]Ty[2]Or[0], [335]Ty[3]Or[2], [339]Ty[3]Or[2], 
[342]Ty[3]Or[3], [345]Ty[1]Or[3], [348]Ty[1]Or[0], [349]Ty[3]Or[3], [350]Ty[3]Or[0], [357]Ty[1]Or[2], [362]Ty[3]Or[2], [363]Ty[2]Or[1], 
[369]Ty[2]Or[3], [370]Ty[1]Or[0], [371]Ty[3]Or[3], [372]Ty[1]Or[3], [375]Ty[1]Or[0], [376]Ty[2]Or[3], [377]Ty[1]Or[2], [378]Ty[2]Or[0], 
[380]Ty[3]Or[2], [383]Ty[2]Or[1], [384]Ty[1]Or[0], [391]Ty[2]Or[1], [401]Ty[1]Or[0], [402]Ty[2]Or[3], [404]Ty[2]Or[1], [408]Ty[2]Or[0], 
[410]Ty[1]Or[3], [419]Ty[2]Or[0], [420]Ty[3]Or[1], [421]Ty[3]Or[2], [422]Ty[3]Or[1], [423]Ty[3]Or[2], [430]Ty[3]Or[1], [431]Ty[2]Or[3], 
[434]Ty[3]Or[2], [435]Ty[2]Or[2], [436]Ty[1]Or[3], [437]Ty[1]Or[2], [438]Ty[2]Or[2], [441]Ty[2]Or[1], [445]Ty[3]Or[0], [448]Ty[1]Or[3], 
[451]Ty[3]Or[3], [452]Ty[2]Or[3], [453]Ty[1]Or[3], [457]Ty[3]Or[0], [458]Ty[2]Or[2], [459]Ty[3]Or[0], [460]Ty[1]Or[2], [467]Ty[1]Or[3], 
[472]Ty[3]Or[3], [475]Ty[3]Or[1], [476]Ty[2]Or[1], [478]Ty[1]Or[2], [480]Ty[2]Or[0], [481]Ty[2]Or[1], [482]Ty[1]Or[1], [486]Ty[2]Or[1], 
[487]Ty[3]Or[0], [488]Ty[3]Or[3], [490]Ty[2]Or[3], [495]Ty[2]Or[1], [496]Ty[3]Or[1], [497]Ty[1]Or[1], [499]Ty[2]Or[0], [500]Ty[3]Or[3], 
[502]Ty[3]Or[0], [504]Ty[2]Or[2], [507]Ty[3]Or[3], [508]Ty[3]Or[3], [509]Ty[2]Or[0], [516]Ty[1]Or[1], [517]Ty[1]Or[3], [518]Ty[3]Or[3], 
[519]Ty[3]Or[3], [521]Ty[2]Or[3], [525]Ty[3]Or[0], [526]Ty[3]Or[2], [530]Ty[1]Or[1], [531]Ty[2]Or[2], [536]Ty[2]Or[0], [537]Ty[3]Or[2], 
[538]Ty[2]Or[3], [539]Ty[2]Or[1], [543]Ty[2]Or[0], [546]Ty[2]Or[0], [547]Ty[3]Or[3], [551]Ty[3]Or[2], [552]Ty[3]Or[3], [553]Ty[1]Or[2], 
[561]Ty[1]Or[0], [562]Ty[1]Or[0], [565]Ty[2]Or[2], [568]Ty[2]Or[3], [569]Ty[1]Or[0], [573]Ty[1]Or[0], [574]Ty[1]Or[1], [579]Ty[2]Or[3], 
[590]Ty[2]Or[1], [591]Ty[3]Or[2], [592]Ty[1]Or[2], [595]Ty[1]Or[2], [596]Ty[1]Or[3], [597]Ty[2]Or[0], [598]Ty[3]Or[1], [599]Ty[2]Or[0], 
[603]Ty[3]Or[1], [605]Ty[2]Or[3], [609]Ty[1]Or[1], [612]Ty[1]Or[0], [613]Ty[3]Or[2], [614]Ty[2]Or[1], [617]Ty[2]Or[0], [622]Ty[3]Or[1], 
[625]Ty[2]Or[2], [626]Ty[1]Or[1], [629]Ty[1]Or[2], [630]Ty[1]Or[1], [636]Ty[2]Or[0], [639]Ty[2]Or[1], [643]Ty[3]Or[2], [647]Ty[2]Or[0], 
[651]Ty[2]Or[2], [653]Ty[2]Or[0], [654]Ty[3]Or[2], [655]Ty[2]Or[1], [666]Ty[2]Or[1], [667]Ty[3]Or[1], [668]Ty[2]Or[3], [670]Ty[3]Or[2], 
[671]Ty[3]Or[1], [672]Ty[1]Or[2], [674]Ty[1]Or[2], [676]Ty[3]Or[1], [683]Ty[3]Or[3], [684]Ty[3]Or[0], [685]Ty[3]Or[2], [686]Ty[2]Or[0], 
[687]Ty[2]Or[2], [688]Ty[2]Or[1], [689]Ty[1]Or[0], [692]Ty[2]Or[2], [693]Ty[1]Or[2], [694]Ty[2]Or[3], [695]Ty[2]Or[2], [697]Ty[1]Or[2], 
[699]Ty[1]Or[1], [701]Ty[3]Or[3], [705]Ty[1]Or[1], [706]Ty[3]Or[2], [707]Ty[1]Or[2], [708]Ty[3]Or[0], [710]Ty[2]Or[2], [711]Ty[3]Or[1], 
[714]Ty[2]Or[1], [715]Ty[1]Or[2], [716]Ty[2]Or[3], [717]Ty[1]Or[1], [718]Ty[1]Or[3], [720]Ty[1]Or[1], [722]Ty[3]Or[1], [724]Ty[2]Or[3], 
[727]Ty[3]Or[3], [728]Ty[1]Or[0], [729]Ty[3]Or[2], [730]Ty[3]Or[2], [731]Ty[2]Or[0], [733]Ty[2]Or[2], [736]Ty[3]Or[0], [737]Ty[3]Or[3], 
[739]Ty[3]Or[0], [742]Ty[3]Or[2], [743]Ty[3]Or[1], [744]Ty[2]Or[1], [754]Ty[3]Or[0], [757]Ty[3]Or[1], [758]Ty[2]Or[1], [759]Ty[3]Or[3], 
[760]Ty[1]Or[0], [764]Ty[1]Or[0], [767]Ty[2]Or[3], [768]Ty[2]Or[3], [771]Ty[1]Or[1], [773]Ty[2]Or[3], [774]Ty[3]Or[1], [775]Ty[1]Or[2],
[777]Ty[2]Or[3], [779]Ty[1]Or[3], [781]Ty[1]Or[1], [783]Ty[3]Or[3], [786]Ty[3]Or[1], [788]Ty[1]Or[3], [793]Ty[2]Or[1], [794]Ty[2]Or[3], 
[795]Ty[3]Or[3], [796]Ty[2]Or[1], [797]Ty[2]Or[2], [798]Ty[3]Or[0], [803]Ty[3]Or[1], [807]Ty[2]Or[0], [808]Ty[3]Or[3], [811]Ty[1]Or[0], 
[812]Ty[3]Or[2], [815]Ty[1]Or[2], [818]Ty[3]Or[3], [819]Ty[3]Or[2], [825]Ty[3]Or[0], [829]Ty[3]Or[0], [833]Ty[1]Or[0], [834]Ty[3]Or[0], 
[837]Ty[3]Or[3], [838]Ty[3]Or[0], [839]Ty[1]Or[2], [841]Ty[2]Or[1], [842]Ty[2]Or[2], [845]Ty[2]Or[3], [846]Ty[2]Or[2], [847]Ty[2]Or[1], 
[848]Ty[3]Or[0], [851]Ty[1]Or[0], [854]Ty[1]Or[1], [859]Ty[1]Or[2], [861]Ty[3]Or[2], [863]Ty[1]Or[0], [864]Ty[3]Or[3], [866]Ty[1]Or[3], 
[867]Ty[3]Or[1], [868]Ty[3]Or[1], [869]Ty[1]Or[1], [870]Ty[1]Or[3], [873]Ty[3]Or[1], [881]Ty[2]Or[0], [882]Ty[3]Or[1], [886]Ty[3]Or[1], 
[887]Ty[2]Or[3], [888]Ty[2]Or[3], [890]Ty[1]Or[0], [891]Ty[2]Or[1], [892]Ty[3]Or[2], [893]Ty[3]Or[0], [894]Ty[1]Or[0], [895]Ty[2]Or[3], 
[899]Ty[1]Or[3], [900]Ty[1]Or[1],

2 : 
[24]Ty[2]Or[3], [25]Ty[1]Or[2], [27]Ty[3]Or[3], [29]Ty[2]Or[0], [30]Ty[1]Or[2], [31]Ty[1]Or[1], [35]Ty[2]Or[2], [36]Ty[1]Or[1], [39]Ty[1]Or[3], 
[41]Ty[2]Or[0], [42]Ty[1]Or[1], [45]Ty[1]Or[1], [48]Ty[3]Or[1], [51]Ty[1]Or[3], [57]Ty[3]Or[0], [61]Ty[3]Or[0], [62]Ty[1]Or[2], [63]Ty[1]Or[0], 
[70]Ty[2]Or[0], [76]Ty[2]Or[1], [80]Ty[2]Or[1], [81]Ty[3]Or[2], [82]Ty[2]Or[1], [86]Ty[1]Or[3], [89]Ty[2]Or[2], [90]Ty[2]Or[0], [91]Ty[3]Or[1], 
[92]Ty[3]Or[2], [97]Ty[3]Or[3], [102]Ty[3]Or[2], [103]Ty[1]Or[2], [104]Ty[2]Or[2], [105]Ty[3]Or[3], [106]Ty[1]Or[0], [107]Ty[1]Or[1], [108]Ty[3]Or[2], 
[111]Ty[3]Or[2], [112]Ty[2]Or[1], [113]Ty[1]Or[0], [114]Ty[3]Or[2], [117]Ty[2]Or[1], [119]Ty[3]Or[2], [120]Ty[1]Or[0], [121]Ty[3]Or[0], [122]Ty[2]Or[2], 
[123]Ty[3]Or[3], [125]Ty[2]Or[2], [126]Ty[3]Or[2], [127]Ty[1]Or[3], [128]Ty[2]Or[2], [129]Ty[2]Or[0], [133]Ty[1]Or[3], [134]Ty[2]Or[0], [136]Ty[3]Or[3], 
[138]Ty[3]Or[0], [140]Ty[3]Or[3], [142]Ty[1]Or[3], [143]Ty[2]Or[0], [144]Ty[2]Or[1], [147]Ty[3]Or[0], [151]Ty[1]Or[0], [152]Ty[2]Or[1], [155]Ty[2]Or[3], 
[156]Ty[2]Or[2], [160]Ty[3]Or[1], [161]Ty[1]Or[0], [164]Ty[1]Or[1], [169]Ty[3]Or[3], [171]Ty[3]Or[3], [173]Ty[3]Or[3], [174]Ty[3]Or[2], [177]Ty[2]Or[1], 
[178]Ty[1]Or[2], [183]Ty[1]Or[1], [193]Ty[3]Or[0], [195]Ty[1]Or[0], [199]Ty[1]Or[1], [200]Ty[2]Or[3], [201]Ty[2]Or[0], [204]Ty[1]Or[0], [205]Ty[1]Or[2], 
[208]Ty[2]Or[3], [218]Ty[3]Or[2], [221]Ty[3]Or[2], [230]Ty[1]Or[1], [231]Ty[2]Or[1], [233]Ty[2]Or[0], [234]Ty[3]Or[0], [238]Ty[2]Or[0], [240]Ty[1]Or[2], 
[243]Ty[1]Or[1], [246]Ty[3]Or[2], [249]Ty[1]Or[2], [250]Ty[2]Or[0], [252]Ty[3]Or[3], [253]Ty[2]Or[3], [254]Ty[3]Or[3], [255]Ty[1]Or[3], [259]Ty[2]Or[0], 
[260]Ty[3]Or[3], [262]Ty[3]Or[1], [268]Ty[2]Or[1], [273]Ty[3]Or[1], [275]Ty[1]Or[2], [276]Ty[3]Or[0], [279]Ty[3]Or[2], [280]Ty[3]Or[3], [282]Ty[3]Or[0], 
[283]Ty[1]Or[3], [289]Ty[3]Or[2], [291]Ty[2]Or[0], [292]Ty[3]Or[1], [301]Ty[2]Or[2], [304]Ty[1]Or[2], [309]Ty[3]Or[0], [319]Ty[3]Or[1], [326]Ty[3]Or[1], 
[327]Ty[2]Or[3], [331]Ty[3]Or[0], [333]Ty[2]Or[0], [339]Ty[2]Or[3], [348]Ty[2]Or[0], [349]Ty[2]Or[0], [350]Ty[3]Or[2], [354]Ty[3]Or[2], [357]Ty[3]Or[3], 
[359]Ty[1]Or[3], [364]Ty[1]Or[0], [365]Ty[3]Or[3], [367]Ty[3]Or[0], [370]Ty[1]Or[2], [372]Ty[3]Or[2], [375]Ty[2]Or[1], [385]Ty[2]Or[3], [386]Ty[1]Or[0], 
[389]Ty[3]Or[3], [391]Ty[1]Or[3], [392]Ty[1]Or[0], [393]Ty[2]Or[3], [394]Ty[1]Or[2], [407]Ty[2]Or[0], [413]Ty[3]Or[2], [414]Ty[2]Or[1], [415]Ty[1]Or[0], 
[416]Ty[2]Or[1], [419]Ty[1]Or[0], [420]Ty[2]Or[3], [421]Ty[2]Or[1], [422]Ty[2]Or[0], [426]Ty[1]Or[3], [429]Ty[2]Or[0], [430]Ty[3]Or[1], [438]Ty[3]Or[2], 
[447]Ty[3]Or[1], [450]Ty[3]Or[2], [451]Ty[3]Or[1], [452]Ty[2]Or[3], [457]Ty[3]Or[2], [458]Ty[2]Or[2], [459]Ty[1]Or[3], [460]Ty[1]Or[2], [463]Ty[2]Or[2], 
[464]Ty[2]Or[1], [465]Ty[3]Or[0], [466]Ty[1]Or[3], [469]Ty[3]Or[3], [472]Ty[2]Or[3], [473]Ty[1]Or[3], [475]Ty[3]Or[0], [476]Ty[2]Or[2], [479]Ty[3]Or[0], 
[480]Ty[1]Or[2], [481]Ty[1]Or[3], [482]Ty[3]Or[3], [487]Ty[3]Or[1], [490]Ty[2]Or[1], [492]Ty[1]Or[2], [493]Ty[2]Or[0], [494]Ty[2]Or[1], [495]Ty[1]Or[1], 
[497]Ty[2]Or[1], [498]Ty[3]Or[0], [499]Ty[3]Or[3], [501]Ty[2]Or[3], [503]Ty[2]Or[1], [504]Ty[3]Or[1], [507]Ty[1]Or[1], [509]Ty[2]Or[0], [512]Ty[3]Or[3], 
[514]Ty[3]Or[0], [516]Ty[2]Or[2], [517]Ty[3]Or[3], [518]Ty[3]Or[3], [519]Ty[2]Or[0], [524]Ty[1]Or[1], [525]Ty[1]Or[3], [526]Ty[3]Or[3], [529]Ty[3]Or[3], 
[530]Ty[1]Or[2], [531]Ty[3]Or[0], [532]Ty[3]Or[0], [533]Ty[3]Or[2], [537]Ty[1]Or[1], [540]Ty[2]Or[2], [541]Ty[2]Or[0], [542]Ty[3]Or[2], [545]Ty[2]Or[3], 
[546]Ty[2]Or[1], [548]Ty[2]Or[0], [551]Ty[2]Or[0], [552]Ty[3]Or[3], [554]Ty[3]Or[2], [555]Ty[3]Or[3], [558]Ty[1]Or[2], [573]Ty[1]Or[0], [574]Ty[1]Or[0], 
[575]Ty[2]Or[2], [576]Ty[2]Or[3], [580]Ty[1]Or[0], [582]Ty[1]Or[0], [583]Ty[1]Or[1], [590]Ty[2]Or[3], [595]Ty[2]Or[1], [596]Ty[3]Or[2], [597]Ty[1]Or[2], 
[608]Ty[1]Or[2], [609]Ty[1]Or[3], [611]Ty[2]Or[0], [612]Ty[3]Or[1], [613]Ty[2]Or[0], [617]Ty[3]Or[1], [619]Ty[2]Or[3], [623]Ty[1]Or[1], [626]Ty[1]Or[0], 
[627]Ty[3]Or[2], [628]Ty[2]Or[1], [629]Ty[2]Or[0], [630]Ty[3]Or[1], [633]Ty[2]Or[2], [634]Ty[1]Or[1], [639]Ty[1]Or[2], [640]Ty[1]Or[1], [652]Ty[2]Or[0], 
[655]Ty[2]Or[1], [661]Ty[3]Or[2], [663]Ty[2]Or[0], [664]Ty[2]Or[2], [666]Ty[2]Or[0], [667]Ty[3]Or[2], [668]Ty[2]Or[1], [670]Ty[2]Or[1], [671]Ty[3]Or[1], 
[672]Ty[2]Or[3], [673]Ty[3]Or[2], [674]Ty[3]Or[1], [675]Ty[1]Or[2], [677]Ty[1]Or[2], [679]Ty[3]Or[1], [680]Ty[3]Or[3], [683]Ty[3]Or[0], [684]Ty[3]Or[2], 
[685]Ty[2]Or[0], [686]Ty[2]Or[2], [687]Ty[2]Or[1], [688]Ty[1]Or[0], [689]Ty[2]Or[2], [690]Ty[1]Or[2], [691]Ty[2]Or[3], [693]Ty[2]Or[2], [694]Ty[1]Or[2], 
[695]Ty[1]Or[1], [697]Ty[3]Or[3], [699]Ty[1]Or[1], [700]Ty[3]Or[2], [701]Ty[1]Or[2], [702]Ty[3]Or[0], [706]Ty[2]Or[2], [707]Ty[3]Or[1], [708]Ty[2]Or[1], 
[709]Ty[1]Or[2], [711]Ty[2]Or[3], [715]Ty[1]Or[1], [716]Ty[1]Or[3], [717]Ty[1]Or[1], [721]Ty[3]Or[1], [723]Ty[2]Or[3], [724]Ty[3]Or[3], [727]Ty[1]Or[0], 
[728]Ty[3]Or[2], [729]Ty[3]Or[2], [730]Ty[2]Or[0], [732]Ty[2]Or[2], [737]Ty[3]Or[0], [738]Ty[3]Or[3], [740]Ty[3]Or[0], [743]Ty[3]Or[2], [744]Ty[3]Or[1], 
[745]Ty[2]Or[1], [759]Ty[3]Or[0], [762]Ty[3]Or[1], [765]Ty[2]Or[1], [766]Ty[3]Or[3], [767]Ty[1]Or[0], [771]Ty[1]Or[0], [774]Ty[2]Or[3], [776]Ty[2]Or[3], 
[779]Ty[1]Or[1], [781]Ty[2]Or[3], [782]Ty[3]Or[1], [783]Ty[1]Or[2], [788]Ty[2]Or[3], [789]Ty[1]Or[3], [790]Ty[1]Or[1], [794]Ty[3]Or[3], [795]Ty[2]Or[0], 
[798]Ty[3]Or[1], [800]Ty[1]Or[3], [804]Ty[2]Or[1], [805]Ty[2]Or[3], [807]Ty[3]Or[3], [809]Ty[1]Or[2], [810]Ty[2]Or[3], [812]Ty[3]Or[1], [816]Ty[2]Or[0], 
[817]Ty[3]Or[3], [820]Ty[2]Or[0], [821]Ty[1]Or[0], [824]Ty[3]Or[2], [825]Ty[1]Or[2], [832]Ty[3]Or[3], [833]Ty[3]Or[2], [837]Ty[3]Or[0], [839]Ty[3]Or[0], 
[843]Ty[1]Or[0], [846]Ty[3]Or[0], [847]Ty[3]Or[3], [848]Ty[3]Or[0], [853]Ty[1]Or[2], [855]Ty[2]Or[1], [856]Ty[2]Or[2], [859]Ty[2]Or[3], [860]Ty[2]Or[2], 
[861]Ty[2]Or[1], [865]Ty[3]Or[0], [866]Ty[1]Or[0], [867]Ty[1]Or[1], [870]Ty[1]Or[2], [876]Ty[3]Or[2], [878]Ty[1]Or[0], [881]Ty[3]Or[3], [887]Ty[1]Or[3], 
[888]Ty[3]Or[1], [892]Ty[3]Or[1], [893]Ty[1]Or[1], [894]Ty[1]Or[3], [897]Ty[3]Or[1], 



1:
[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23]Ty[0], [24]Ty[2]Or[3],
[25]Ty[1]Or[2], [26]Ty[0], [27]Ty[3]Or[3], [28], [29]Ty[0], [30]Ty[1]Or[2], [31]Ty[1]Or[1], [32], [33], [34]Ty[0], [35]Ty[2]Or[2], [36]Ty[1]Or[1], [37],
[38], [39]Ty[1]Or[3], [40]Ty[0], [41]Ty[2]Or[0], [42]Ty[1]Or[1], [43], [44], [45]Ty[1]Or[1], [46], [47], [48]Ty[3]Or[1], [49], [50], [51]Ty[1]Or[3],
[52], [53], [54], [55], [56]Ty[0], [57]Ty[3]Or[0], [58], [59], [60], [61]Ty[3]Or[0], [62]Ty[1]Or[2], [63]Ty[1]Or[0], [64]Ty[0], [65], [66], [67], [68], 
[69], [70]Ty[2]Or[0], [71], [72], [73], [74], [75]Ty[0], [76]Ty[2]Or[1], [77], [78], [79], [80]Ty[2]Or[1], [81]Ty[3]Or[2], [82]Ty[2]Or[1], [83], [84],
[85], [86]Ty[1]Or[3], [87], [88], [89]Ty[2]Or[2], [90]Ty[2]Or[0], [91]Ty[3]Or[1], [92]Ty[3]Or[2], [93], [94], [95], [96], [97]Ty[3]Or[3], [98], [99], 
[100], [101], [102]Ty[3]Or[2], [103]Ty[1]Or[2], [104]Ty[2]Or[2], [105]Ty[3]Or[3], [106]Ty[1]Or[0], [107]Ty[1]Or[1], [108]Ty[3]Or[2], [109], [110],
[111]Ty[3]Or[2], [112]Ty[2]Or[1], [113]Ty[1]Or[0], [114]Ty[3]Or[2], [115], [116], [117]Ty[2]Or[1], [118]Ty[0], [119]Ty[3]Or[2], [120]Ty[1]Or[0], [121]Ty[3]Or[0], [122]Ty[2]Or[2], [123]Ty[3]Or[3], [124], 
[125]Ty[2]Or[3], [126], [127]Ty[2]Or[1], [128]Ty[3]Or[2], [129]Ty[2]Or[2], [130]Ty[0], [131], [132], [133]Ty[0], [134]Ty[1]Or[3], [135]Ty[2]Or[0], [136]Ty[0], [137]Ty[3]Or[3], [138], [139]Ty[0], [140]Ty[0], [141]Ty[3]Or[3], [142], [143]Ty[3]Or[2], [144]Ty[0], [145], [146], [147], [148], [149]Ty[2]Or[1], [150]Ty[3]Or[0], [151]Ty[0], [152]Ty[0], [153], [154], [155]Ty[0], [156]Ty[1]Or[0], 
[157]Ty[2]Or[1], [158]Ty[2]Or[3], [159], [160], [161]Ty[2]Or[2], [162]Ty[0], [163], [164], [165]Ty[3]Or[1], [166]Ty[1]Or[0], [167], [168], [169], [170], [171]Ty[1]Or[1], [172], [173], [174]Ty[3]Or[3], [175], [176], [177]Ty[3]Or[3], [178]Ty[0], [179]Ty[3]Or[3], [180]Ty[3]Or[2], [181], [182], [183]Ty[2]Or[1], [184]Ty[1]Or[2], [185], 
[186], [187]Ty[0], [188]Ty[0], [189], [190], [191], [192], [193], [194], [195], [196]Ty[1]Or[1], [197], [198], [199]Ty[3]Or[0], [200]Ty[0], [201]Ty[1]Or[0], [202]Ty[0], [203], [204], [205]Ty[1]Or[1], [206]Ty[2]Or[3], [207], [208], [209]Ty[2]Or[0], [210]Ty[1]Or[0], [211], [212], [213]Ty[1]Or[2], [214]Ty[2]Or[3], [215], [216]Ty[0], [217]Ty[0], [218]Ty[3]Or[2], [219], 
[220], [221]Ty[3]Or[2], [222]Ty[0], [223]Ty[0], [224]Ty[0], [225], [226], [227]Ty[0], [228]Ty[1]Or[1], [229], [230], [231]Ty[2]Or[1], [232]Ty[0], [233]Ty[2]Or[0], [234]Ty[3]Or[0], [235]Ty[0], [236], [237], [238]Ty[2]Or[0], [239]Ty[0], [240]Ty[1]Or[2], [241], [242], [243]Ty[1]Or[1], [244], [245], [246]Ty[3]Or[2], [247]Ty[0], [248]Ty[0], [249]Ty[1]Or[2], [250], [251]Ty[2]Or[0], [252]Ty[0], [253]Ty[3]Or[3], 
[254]Ty[2]Or[3], [255]Ty[3]Or[3], [256], [257]Ty[3]Or[2], [258], [259], [260]Ty[0], [261]Ty[3]Or[3], [262]Ty[0], [263], [264], [265], [266], [267], [268]Ty[3]Or[1], [269], [270], [271], [272], [273]Ty[1]Or[3], 
[274], [275]Ty[1]Or[0], [276]Ty[1]Or[2], [277], [278], [279]Ty[3]Or[0], [280], [281], [282]Ty[3]Or[2], [283]Ty[3]Or[3], [284]Ty[3]Or[0], [285], [286], [287]Ty[1]Or[3], [288]Ty[0], [289]Ty[0], [290], [291], [292], [293], [294], [295], [296], [297]Ty[0], [298]Ty[3]Or[2], [299], [300], [301]Ty[0], [302]Ty[2]Or[0], [303]Ty[3]Or[1], [304]Ty[0], [305]Ty[0], [306]Ty[2]Or[2], [307], [308], [309]Ty[1]Or[2], [310]Ty[0],
 [311]Ty[0], [312]Ty[3]Or[0], [313]Ty[3]Or[1], [314]Ty[3]Or[1], 
[315]Ty[2]Or[3], [316], [317], [318], [319]Ty[0], [320]Ty[3]Or[0], [321], [322], [323]Ty[0], [324]Ty[2]Or[0], [325]Ty[0], [326]Ty[0], [327]Ty[0], [328]Ty[0], [329], [330], [331]Ty[0], [332]Ty[2]Or[3], [333]Ty[2]Or[0], [334]Ty[2]Or[0], [335]Ty[3]Or[2], [336]Ty[0], [337], [338], [339]Ty[3]Or[2], [340]Ty[0], [341]Ty[0], [342]Ty[3]Or[3], [343], [344], [345]Ty[1]Or[3], [346], [347]Ty[0], [348]Ty[1]Or[0], 
[349]Ty[3]Or[3], [350]Ty[3]Or[0], [351], [352], [353], [354], [355], [356], [357]Ty[1]Or[2], [358], [359], [360], [361]Ty[0], [362]Ty[3]Or[2], [363]Ty[2]Or[1], [364], [365], [366], [367], [368], [369]Ty[2]Or[3], [370]Ty[1]Or[0], [371]Ty[3]Or[3], [372]Ty[1]Or[3], [373], [374], [375]Ty[1]Or[0], [376]Ty[2]Or[3], [377]Ty[1]Or[2], [378]Ty[2]Or[0], [379]Ty[0], [380]Ty[3]Or[2], [381], [382], [383]Ty[2]Or[1], [384]Ty[1]Or[0], [385], [386], [387], [388], [389], 
[390], [391]Ty[2]Or[1], [392], [393], [394], [395], [396], [397], [398], [399], [400], [401]Ty[1]Or[0], [402]Ty[2]Or[3], [403], [404]Ty[2]Or[1], [405], [406], [407], [408]Ty[2]Or[0], [409]Ty[0], [410]Ty[1]Or[3], [411], [412]Ty[0], [413], [414], [415], [416], [417], [418], [419]Ty[2]Or[0], [420]Ty[3]Or[1], [421]Ty[3]Or[2], [422]Ty[3]Or[1], [423]Ty[3]Or[2], [424], [425], [426], [427], [428], [429], 
[430]Ty[3]Or[1], [431]Ty[2]Or[3], [432], [433], [434]Ty[3]Or[2], [435]Ty[2]Or[2], [436]Ty[1]Or[3], [437]Ty[1]Or[2], [438]Ty[2]Or[2], [439], [440], [441]Ty[2]Or[1], [442], [443], [444], [445]Ty[3]Or[0], [446], [447], [448]Ty[1]Or[3], [449], [450]Ty[0], [451]Ty[3]Or[3], [452]Ty[2]Or[3], [453]Ty[1]Or[3], [454], [455], [456]Ty[0], [457]Ty[3]Or[0], [458]Ty[2]Or[2], [459]Ty[3]Or[0], [460]Ty[1]Or[2], 
[461], [462], [463], [464], [465], [466], [467]Ty[1]Or[3], [468], [469], [470], [471], [472]Ty[3]Or[3], [473]Ty[0], [474]Ty[0], [475]Ty[3]Or[1], [476]Ty[2]Or[1], [477]Ty[0], [478]Ty[1]Or[2], [479], [480]Ty[2]Or[0], [481]Ty[2]Or[1], [482]Ty[1]Or[1], [483], [484], [485]Ty[0], [486]Ty[2]Or[1], [487]Ty[3]Or[0], [488]Ty[3]Or[3], 
[489], [490]Ty[2]Or[3], [491], [492], [493], [494]Ty[0], [495]Ty[2]Or[1], 
[496]Ty[3]Or[1], [497]Ty[1]Or[1], [498]Ty[0], [499]Ty[2]Or[0], [500]Ty[3]Or[3], [501], [502]Ty[3]Or[0], [503]Ty[0], [504]Ty[2]Or[2], [505], [506], [507]Ty[3]Or[3], [508]Ty[3]Or[3], [509]Ty[2]Or[0], [510], [511], [512], [513], [514]Ty[0], [515]Ty[0], [516]Ty[1]Or[1], [517]Ty[1]Or[3], [518]Ty[3]Or[3], [519]Ty[3]Or[3], [520], [521]Ty[2]Or[3], [522], [523], [524]Ty[0], [525]Ty[3]Or[0], [526]Ty[3]Or[2], [527], 
[528], [529]Ty[0], [530]Ty[1]Or[1], [531]Ty[2]Or[2], [532], [533], [534], [535], [536]Ty[2]Or[0], [537]Ty[3]Or[2], [538]Ty[2]Or[3], [539]Ty[2]Or[1], [540]Ty[0], [541], [542], [543]Ty[2]Or[0], [544], [545], [546]Ty[2]Or[0], [547]Ty[3]Or[3], [548]Ty[0], [549], [550], [551]Ty[3]Or[2], [552]Ty[3]Or[3], [553]Ty[1]Or[2], [554], [555], [556], [557], [558]Ty[0], [559]Ty[0], [560]Ty[0], [561]Ty[1]Or[0], [562]Ty[1]Or[0], [563], [564], [565]Ty[2]Or[2], [566], 
[567], [568]Ty[2]Or[3], [569]Ty[1]Or[0], [570]Ty[0], [571], [572], [573]Ty[1]Or[0], [574]Ty[1]Or[1], [575]Ty[0], [576], [577], [578]Ty[0], [579]Ty[2]Or[3], [580], [581], [582], [583], [584]Ty[0], [585], [586], [587]Ty[0], [588], [589], [590]Ty[2]Or[1], [591]Ty[3]Or[2], [592]Ty[1]Or[2], [593], [594], [595]Ty[1]Or[2], [596]Ty[1]Or[3], [597]Ty[2]Or[0], [598]Ty[3]Or[1], [599]Ty[2]Or[0], [600]Ty[0], 
[601], [602], [603]Ty[3]Or[1], [604]Ty[0], [605]Ty[2]Or[3], [606]Ty[0], [607], [608], [609]Ty[1]Or[1], [610], [611], [612]Ty[1]Or[0], [613]Ty[3]Or[2], [614]Ty[2]Or[1], [615], [616], [617]Ty[2]Or[0], [618], [619], [620], [621], [622]Ty[3]Or[1], [623], [624], [625]Ty[2]Or[2], [626]Ty[1]Or[1], [627], [628], [629]Ty[1]Or[2], [630]Ty[1]Or[1], [631], [632], [633], [634]Ty[0], [635]Ty[0], [636]Ty[2]Or[0], 
[637], [638], [639]Ty[2]Or[1], [640], [641], [642], [643]Ty[3]Or[2], [644]Ty[0], [645], [646], [647]Ty[2]Or[0], [648], [649], [650], [651]Ty[2]Or[2], [652]Ty[0], [653]Ty[2]Or[0], [654]Ty[3]Or[2], [655]Ty[2]Or[1], [656], [657], [658], [659], [660], [661], [662], [663], [664], [665]Ty[0], [666]Ty[2]Or[1], [667]Ty[3]Or[1], 
[668]Ty[2]Or[3], [669], [670]Ty[3]Or[2], [671]Ty[3]Or[1], [672]Ty[1]Or[2], [673]Ty[0], [674]Ty[1]Or[2], [675]Ty[0], [676]Ty[3]Or[1], [677], [678], [679], [680], [681], [682], [683]Ty[3]Or[3], [684]Ty[3]Or[0], [685]Ty[3]Or[2], [686]Ty[2]Or[0], [687]Ty[2]Or[2], [688]Ty[2]Or[1], [689]Ty[1]Or[0], [690], [691], [692]Ty[2]Or[2], [693]Ty[1]Or[2], [694]Ty[2]Or[3], [695]Ty[2]Or[2], 
[696], [697]Ty[1]Or[2], [698], [699]Ty[1]Or[1], [700]Ty[0], [701]Ty[3]Or[3], [702]Ty[0], [703], [704], [705]Ty[1]Or[1], [706]Ty[3]Or[2], [707]Ty[1]Or[2], [708]Ty[3]Or[0], [709]Ty[0], [710]Ty[2]Or[2], [711]Ty[3]Or[1], [712], [713], [714]Ty[2]Or[1], [715]Ty[1]Or[2], [716]Ty[2]Or[3], [717]Ty[1]Or[1], [718]Ty[1]Or[3], [719], [720]Ty[1]Or[1], [721]Ty[0], [722]Ty[3]Or[1], [723]Ty[0], [724]Ty[2]Or[3], [725], [726],
 [727]Ty[3]Or[3], [728]Ty[1]Or[0], [729]Ty[3]Or[2], [730]Ty[3]Or[2], [731]Ty[2]Or[0], [732]Ty[0], [733]Ty[2]Or[2], [734], [735], [736]Ty[3]Or[0], [737]Ty[3]Or[3], [738]Ty[0], [739]Ty[3]Or[0], 
[740], [741], [742]Ty[3]Or[2], [743]Ty[3]Or[1], [744]Ty[2]Or[1], [745]Ty[0], [746]Ty[0], [747], [748], [749]Ty[0], [750], [751], [752], [753], [754]Ty[3]Or[0], [755]Ty[0], [756]Ty[0], [757]Ty[3]Or[1], [758]Ty[2]Or[1], [759]Ty[3]Or[3], [760]Ty[1]Or[0], [761]Ty[0], [762], [763], [764]Ty[1]Or[0], [765]Ty[0], [766]Ty[0], [767]Ty[2]Or[3], [768]Ty[2]Or[3], [769], [770], [771]Ty[1]Or[1], [772]Ty[0], [773]Ty[2]Or[3],
 [774]Ty[3]Or[1], [775]Ty[1]Or[2], [776]Ty[0], [777]Ty[2]Or[3], 
[778], [779]Ty[1]Or[3], [780], [781]Ty[1]Or[1], [782]Ty[0], [783]Ty[3]Or[3], [784], [785]Ty[0], [786]Ty[3]Or[1], [787]Ty[0], [788]Ty[1]Or[3], [789]Ty[0], [790]Ty[0], [791], [792], [793]Ty[2]Or[1], [794]Ty[2]Or[3], [795]Ty[3]Or[3], [796]Ty[2]Or[1], [797]Ty[2]Or[2], [798]Ty[3]Or[0], [799], [800], [801], [802], [803]Ty[3]Or[1], [804]Ty[0], [805], [806], [807]Ty[2]Or[0], [808]Ty[3]Or[3], [809], [810]Ty[0], 
[811]Ty[1]Or[0], [812]Ty[3]Or[2], [813], [814], [815]Ty[1]Or[2], [816]Ty[0], [817]Ty[0], [818]Ty[3]Or[3], [819]Ty[3]Or[2], [820]Ty[0], [821], [822], [823], [824], [825]Ty[3]Or[0], [826]Ty[0], [827], [828], [829]Ty[3]Or[0], [830], [831], [832]Ty[0], [833]Ty[1]Or[0], [834]Ty[3]Or[0], [835], [836], [837]Ty[3]Or[3], [838]Ty[3]Or[0], [839]Ty[1]Or[2], [840]Ty[0], [841]Ty[2]Or[1], [842]Ty[2]Or[2], [843], [844], [845]Ty[2]Or[3], [846]Ty[2]Or[2], [847]Ty[2]Or[1], 
[848]Ty[3]Or[0], [849], [850], [851]Ty[1]Or[0], [852], [853], [854]Ty[1]Or[1], [855], [856], [857], [858], [859]Ty[1]Or[2], [860]Ty[0], [861]Ty[3]Or[2], [862]Ty[0], [863]Ty[1]Or[0], [864]Ty[3]Or[3], [865]Ty[0], [866]Ty[1]Or[3], [867]Ty[3]Or[1], [868]Ty[3]Or[1], [869]Ty[1]Or[1], [870]Ty[1]Or[3], [871], [872], [873]Ty[3]Or[1], [874], [875], [876], [877], [878], [879], [880], [881]Ty[2]Or[0], 
[882]Ty[3]Or[1], [883], [884], [885], [886]Ty[3]Or[1], [887]Ty[2]Or[3], [888]Ty[2]Or[3], [889]Ty[0], [890]Ty[1]Or[0], [891]Ty[2]Or[1], [892]Ty[3]Or[2], [893]Ty[3]Or[0], [894]Ty[1]Or[0], [895]Ty[2]Or[3], [896], [897], [898]Ty[0], [899]Ty[1]Or[3], [900]Ty[1]Or[1], [901], [902], [903], [904], [905], [906], [907], [908], [909], [910], [911], [912], [913], [914], [915], [916], [917], [918], [919], 
[920], [921], [922], [923]

2:
[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23]Ty[0], [24]Ty[2]Or[3], 
[25]Ty[1]Or[2], [26]Ty[0], [27]Ty[3]Or[3], [28], [29]Ty[2]Or[0], [30]Ty[1]Or[2], [31]Ty[1]Or[1], [32], [33], [34]Ty[0], [35]Ty[2]Or[2], [36]Ty[1]Or[1], [37], 
[38], [39]Ty[1]Or[3], [40]Ty[0], [41]Ty[2]Or[0], [42]Ty[1]Or[1], [43], [44], [45]Ty[1]Or[1], 
[46], [47], [48]Ty[3]Or[1], [49], [50], [51]Ty[1]Or[3], [52], [53], [54], [55], [56]Ty[0], [57]Ty[3]Or[0], [58], [59], [60], [61]Ty[3]Or[0], [62]Ty[1]Or[2], [63]Ty[1]Or[0], [64]Ty[0], [65], [66], [67], [68], [69], [70]Ty[2]Or[0], [71], [72], [73], [74], [75]Ty[0], [76]Ty[2]Or[1], [77], [78], [79], [80]Ty[2]Or[1], [81]Ty[3]Or[2], [82]Ty[2]Or[1], [83], [84], [85], [86]Ty[1]Or[3], [87], [88], [89]Ty[2]Or[2], [90]Ty[2]Or[0], [91]Ty[3]Or[1], [92]Ty[3]Or[2], 
[93], [94], [95], [96], [97]Ty[3]Or[3], [98], [99], [100], [101], [102]Ty[3]Or[2], [103]Ty[1]Or[2], [104]Ty[2]Or[2], [105]Ty[3]Or[3], [106]Ty[1]Or[0], [107]Ty[1]Or[1], [108]Ty[3]Or[2], [109], [110], [111]Ty[3]Or[2], [112]Ty[2]Or[1], [113]Ty[1]Or[0], [114]Ty[3]Or[2], [115], [116], [117]Ty[2]Or[1], [118]Ty[0], [119]Ty[3]Or[2], [120]Ty[1]Or[0], [121]Ty[3]Or[0], [122]Ty[2]Or[2], [123]Ty[3]Or[3], 
[124], [125]Ty[2]Or[2], [126]Ty[3]Or[2], [127]Ty[1]Or[3], [128]Ty[2]Or[2], [129]Ty[2]Or[0], [130]Ty[0], [131], [132], [133]Ty[1]Or[3], [134]Ty[2]Or[0], [135]Ty[0], [136]Ty[3]Or[3], [137], [138]Ty[3]Or[0], [139]Ty[0], [140]Ty[3]Or[3], [141], [142]Ty[1]Or[3], [143]Ty[2]Or[0], [144]Ty[2]Or[1], [145], [146], [147]Ty[3]Or[0], [148]Ty[0], [149]Ty[0], [150]Ty[0], [151]Ty[1]Or[0], [152]Ty[2]Or[1], 
[153], [154], [155]Ty[2]Or[3], [156]Ty[2]Or[2], [157]Ty[0], [158], [159], [160]Ty[3]Or[1], [161]Ty[1]Or[0], [162], [163], [164]Ty[1]Or[1], [165], [166], [167], [168], [169]Ty[3]Or[3], [170], [171]Ty[3]Or[3], [172]Ty[0], [173]Ty[3]Or[3], [174]Ty[3]Or[2], [175], [176], [177]Ty[2]Or[1], [178]Ty[1]Or[2], [179]Ty[0], [180], [181], [182]Ty[0], 
[183]Ty[1]Or[1], [184], [185], [186], [187], [188], [189], [190], [191], [192], [193]Ty[3]Or[0], [194]Ty[0], [195]Ty[1]Or[0], [196]Ty[0], [197], [198], [199]Ty[1]Or[1], [200]Ty[2]Or[3], [201]Ty[2]Or[0], [202], [203], [204]Ty[1]Or[0], [205]Ty[1]Or[2], [206], [207], [208]Ty[2]Or[3], [209]Ty[0], [210]Ty[0], [211], [212], [213], [214], [215], [216], [217], [218]Ty[3]Or[2], 
[219], [220], [221]Ty[3]Or[2], [222]Ty[0], [223]Ty[0], [224], [225], [226]Ty[0], [227]Ty[0], [228], [229], [230]Ty[1]Or[1], [231]Ty[2]Or[1], [232]Ty[0], [233]Ty[2]Or[0], [234]Ty[3]Or[0], [235], [236], [237]Ty[0], [238]Ty[2]Or[0], [239]Ty[0], [240]Ty[1]Or[2], [241], [242], [243]Ty[1]Or[1], [244], [245], [246]Ty[3]Or[2], [247]Ty[0], [248]Ty[0], [249]Ty[1]Or[2], [250]Ty[2]Or[0], [251]Ty[0], [252]Ty[3]Or[3], 
[253]Ty[2]Or[3], [254]Ty[3]Or[3], [255]Ty[1]Or[3], [256], [257], [258], [259]Ty[2]Or[0], [260]Ty[3]Or[3], [261]Ty[0], [262]Ty[3]Or[1], [263], [264], [265], [266], [267], [268]Ty[2]Or[1], 
[269], [270], [271], [272], [273]Ty[3]Or[1], [274]Ty[0], [275]Ty[1]Or[2], [276]Ty[3]Or[0], [277], [278], [279]Ty[3]Or[2], [280]Ty[3]Or[3], [281], [282]Ty[3]Or[0], [283]Ty[1]Or[3], [284]Ty[0], [285], [286], [287]Ty[0], [288]Ty[0], [289]Ty[3]Or[2], [290]Ty[0], [291]Ty[2]Or[0], [292]Ty[3]Or[1], [293], [294], [295], [296], [297]Ty[0], [298]Ty[0], [299], [300], [301]Ty[2]Or[2], [302], [303], [304]Ty[1]Or[2], [305]Ty[0],
 [306]Ty[0], [307], [308], [309]Ty[3]Or[0], [310], [311], 
[312], [313], [314], [315], [316], [317], [318], [319]Ty[3]Or[1], [320], [321], [322], [323], [324], [325], [326]Ty[3]Or[1], [327]Ty[2]Or[3], [328]Ty[0], [329], [330], [331]Ty[3]Or[0], [332]Ty[0], [333]Ty[2]Or[0], [334]Ty[0], [335]Ty[0], [336]Ty[0], [337]Ty[0], [338]Ty[0], [339]Ty[2]Or[3], [340], [341], [342], [343], [344], [345], [346], [347], [348]Ty[2]Or[0], [349]Ty[2]Or[0], [350]Ty[3]Or[2], [351], [352], 
[353]Ty[0], [354]Ty[3]Or[2], [355]Ty[0], [356]Ty[0], [357]Ty[3]Or[3], [358], [359]Ty[1]Or[3], [360], [361], [362], [363]Ty[0], [364]Ty[1]Or[0], [365]Ty[3]Or[3], [366], [367]Ty[3]Or[0], [368], [369], [370]Ty[1]Or[2], [371]Ty[0], [372]Ty[3]Or[2], [373], [374], [375]Ty[2]Or[1], [376], [377], [378], [379], [380], [381], [382], [383], [384], [385]Ty[2]Or[3], [386]Ty[1]Or[0], [387], [388], [389]Ty[3]Or[3], [390], [391]Ty[1]Or[3], [392]Ty[1]Or[0], 
[393]Ty[2]Or[3], [394]Ty[1]Or[2], [395], [396], [397], [398], [399], [400], [401], [402], [403], [404], [405], [406], [407]Ty[2]Or[0], [408]Ty[0], [409], [410], [411], [412], [413]Ty[3]Or[2], [414]Ty[2]Or[1], [415]Ty[1]Or[0], [416]Ty[2]Or[1], [417], [418], [419]Ty[1]Or[0], [420]Ty[2]Or[3], [421]Ty[2]Or[1], [422]Ty[2]Or[0], [423], [424], [425]Ty[0], [426]Ty[1]Or[3], [427], [428]Ty[0], [429]Ty[2]Or[0], 
[430]Ty[3]Or[1], [431], [432], [433], [434], [435], [436], [437], [438]Ty[3]Or[2], [439], [440], [441], [442], [443], [444], [445], [446], [447]Ty[3]Or[1], [448], [449], [450]Ty[3]Or[2], [451]Ty[3]Or[1], [452]Ty[2]Or[3], [453], [454], [455], [456], [457]Ty[3]Or[2], [458]Ty[2]Or[2], [459]Ty[1]Or[3], [460]Ty[1]Or[2], [461], [462], [463]Ty[2]Or[2], [464]Ty[2]Or[1], [465]Ty[3]Or[0], [466]Ty[1]Or[3], 
[467], [468]Ty[0], [469]Ty[3]Or[3], [470], [471], [472]Ty[2]Or[3], [473]Ty[1]Or[3], [474]Ty[0], [475]Ty[3]Or[0], [476]Ty[2]Or[2], [477], [478], [479]Ty[3]Or[0], [480]Ty[1]Or[2], [481]Ty[1]Or[3], [482]Ty[3]Or[3], [483], [484], [485]Ty[0], [486]Ty[0], [487]Ty[3]Or[1], [488], [489], [490]Ty[2]Or[1], [491]Ty[0], [492]Ty[1]Or[2], 
[493]Ty[2]Or[0], [494]Ty[2]Or[1], [495]Ty[1]Or[1], [496]Ty[0], [497]Ty[2]Or[1], 
[498]Ty[3]Or[0], [499]Ty[3]Or[3], [500], [501]Ty[2]Or[3], [502]Ty[0], [503]Ty[2]Or[1], [504]Ty[3]Or[1], [505], [506], [507]Ty[1]Or[1], [508]Ty[0], [509]Ty[2]Or[0], [510], [511], [512]Ty[3]Or[3], [513], [514]Ty[3]Or[0], [515]Ty[0], [516]Ty[2]Or[2], [517]Ty[3]Or[3], [518]Ty[3]Or[3], [519]Ty[2]Or[0], [520]Ty[0], [521], [522], [523]Ty[0], [524]Ty[1]Or[1], [525]Ty[1]Or[3], [526]Ty[3]Or[3], [527], [528], 
[529]Ty[3]Or[3], [530]Ty[1]Or[2], [531]Ty[3]Or[0], [532]Ty[3]Or[0], [533]Ty[3]Or[2], [534], [535], [536]Ty[0], [537]Ty[1]Or[1], [538], [539], [540]Ty[2]Or[2], [541]Ty[2]Or[0], [542]Ty[3]Or[2], [543], [544], [545]Ty[2]Or[3], [546]Ty[2]Or[1], [547]Ty[0], [548]Ty[2]Or[0], [549], [550], [551]Ty[2]Or[0], [552]Ty[3]Or[3], [553]Ty[0], [554]Ty[3]Or[2], [555]Ty[3]Or[3], [556], [557], [558]Ty[1]Or[2], [559], [560], [561], [562]Ty[0], [563]Ty[0], [564]Ty[0], [565], 
[566], [567], [568], [569], [570], [571], [572], [573]Ty[1]Or[0], [574]Ty[1]Or[0], [575]Ty[2]Or[2], [576]Ty[2]Or[3], [577], [578], [579], [580]Ty[1]Or[0], [581]Ty[0], [582]Ty[1]Or[0], [583]Ty[1]Or[1], [584], [585], [586]Ty[0], [587], [588], [589]Ty[0], [590]Ty[2]Or[3], [591]Ty[0], [592]Ty[0], [593], [594], [595]Ty[2]Or[1], [596]Ty[3]Or[2], [597]Ty[1]Or[2], [598], [599], [600], [601], [602], [603], 
[604], [605], [606], [607], [608]Ty[1]Or[2], [609]Ty[1]Or[3], [610], [611]Ty[2]Or[0], [612]Ty[3]Or[1], [613]Ty[2]Or[0], [614]Ty[0], [615], [616], [617]Ty[3]Or[1], [618]Ty[0], [619]Ty[2]Or[3], [620], [621], [622]Ty[0], [623]Ty[1]Or[1], [624], [625], [626]Ty[1]Or[0], [627]Ty[3]Or[2], [628]Ty[2]Or[1], [629]Ty[2]Or[0], [630]Ty[3]Or[1], [631], [632], [633]Ty[2]Or[2], [634]Ty[1]Or[1], [635], [636], 
[637], [638], [639]Ty[1]Or[2], [640]Ty[1]Or[1], [641]Ty[0], [642], [643], [644]Ty[0], [645], [646], [647], [648], [649], [650], [651], [652]Ty[2]Or[0], [653], [654], [655]Ty[2]Or[1], [656], [657], [658], [659], [660], [661]Ty[3]Or[2], [662]Ty[0], [663]Ty[2]Or[0], [664]Ty[2]Or[2], [665]Ty[0], [666]Ty[2]Or[0], [667]Ty[3]Or[2], 
[668]Ty[2]Or[1], [669]Ty[0], [670]Ty[2]Or[1], [671]Ty[3]Or[1], [672]Ty[2]Or[3], [673]Ty[3]Or[2], [674]Ty[3]Or[1], [675]Ty[1]Or[2], [676]Ty[0], [677]Ty[1]Or[2], [678]Ty[0], [679]Ty[3]Or[1], [680]Ty[3]Or[3], [681], [682], [683]Ty[3]Or[0], [684]Ty[3]Or[2], [685]Ty[2]Or[0], [686]Ty[2]Or[2], [687]Ty[2]Or[1], [688]Ty[1]Or[0], [689]Ty[2]Or[2], [690]Ty[1]Or[2], [691]Ty[2]Or[3], [692], 
[693]Ty[2]Or[2], [694]Ty[1]Or[2], [695]Ty[1]Or[1], [696]Ty[0], [697]Ty[3]Or[3], [698], [699]Ty[1]Or[1], [700]Ty[3]Or[2], [701]Ty[1]Or[2], [702]Ty[3]Or[0], [703], [704], [705]Ty[0], [706]Ty[2]Or[2], [707]Ty[3]Or[1], [708]Ty[2]Or[1], [709]Ty[1]Or[2], [710], [711]Ty[2]Or[3], [712], [713], [714], [715]Ty[1]Or[1], [716]Ty[1]Or[3], [717]Ty[1]Or[1], [718]Ty[0], [719], [720], [721]Ty[3]Or[1], [722]Ty[0], [723]Ty[2]Or[3], 
[724]Ty[3]Or[3], [725], [726], [727]Ty[1]Or[0], [728]Ty[3]Or[2], [729]Ty[3]Or[2], [730]Ty[2]Or[0], [731]Ty[0], [732]Ty[2]Or[2], [733], [734], [735], [736], [737]Ty[3]Or[0], 
[738]Ty[3]Or[3], [739]Ty[0], [740]Ty[3]Or[0], [741], [742], [743]Ty[3]Or[2], [744]Ty[3]Or[1], [745]Ty[2]Or[1], [746]Ty[0], [747], [748], [749], [750], [751], [752], [753]Ty[0], [754]Ty[0], [755], [756], [757], [758], [759]Ty[3]Or[0], [760]Ty[0], [761]Ty[0], [762]Ty[3]Or[1], [763], [764], [765]Ty[2]Or[1], [766]Ty[3]Or[3], [767]Ty[1]Or[0], [768]Ty[0], [769], [770], [771]Ty[1]Or[0], [772]Ty[0], [773]Ty[0],
 [774]Ty[2]Or[3], [775], [776]Ty[2]Or[3], [777], [778], [779]Ty[1]Or[1], 
[780]Ty[0], [781]Ty[2]Or[3], [782]Ty[3]Or[1], [783]Ty[1]Or[2], [784], [785], [786], [787]Ty[0], [788]Ty[2]Or[3], [789]Ty[1]Or[3], [790]Ty[1]Or[1], [791], [792], [793]Ty[0], [794]Ty[3]Or[3], [795]Ty[2]Or[0], [796], [797], [798]Ty[3]Or[1], [799]Ty[0], [800]Ty[1]Or[3], [801], [802]Ty[0], [803]Ty[0], [804]Ty[2]Or[1], [805]Ty[2]Or[3], [806], [807]Ty[3]Or[3], [808], [809]Ty[1]Or[2], [810]Ty[2]Or[3], [811]Ty[0], 
[812]Ty[3]Or[1], [813], [814], [815]Ty[0], [816]Ty[2]Or[0], [817]Ty[3]Or[3], [818], [819], [820]Ty[2]Or[0], [821]Ty[1]Or[0], [822], [823], [824]Ty[3]Or[2], [825]Ty[1]Or[2], [826]Ty[0], [827], [828], [829], [830], [831]Ty[0], [832]Ty[3]Or[3], [833]Ty[3]Or[2], [834]Ty[0], [835], [836], [837]Ty[3]Or[0], [838]Ty[0], [839]Ty[3]Or[0], [840], [841], [842]Ty[0], [843]Ty[1]Or[0], [844], [845], [846]Ty[3]Or[0], [847]Ty[3]Or[3], [848]Ty[3]Or[0], [849], [850], 
[851], [852], [853]Ty[1]Or[2], [854]Ty[0], [855]Ty[2]Or[1], [856]Ty[2]Or[2], [857], [858], [859]Ty[2]Or[3], [860]Ty[2]Or[2], [861]Ty[2]Or[1], [862], [863], [864], [865]Ty[3]Or[0], [866]Ty[1]Or[0], [867]Ty[1]Or[1], [868], [869], [870]Ty[1]Or[2], [871], [872], [873], [874], [875]Ty[0], [876]Ty[3]Or[2], [877]Ty[0], [878]Ty[1]Or[0], [879], [880], [881]Ty[3]Or[3], [882]Ty[0], [883], [884], [885], [886], 
[887]Ty[1]Or[3], [888]Ty[3]Or[1], [889], [890], [891], [892]Ty[3]Or[1], [893]Ty[1]Or[1], [894]Ty[1]Or[3], [895], [896], [897]Ty[3]Or[1], [898], [899], [900], [901], [902], [903], [904], [905], [906], [907], [908], [909], [910], [911], [912], [913], [914], [915], [916], [917], [918], [919], [920], [921], [922], [923]